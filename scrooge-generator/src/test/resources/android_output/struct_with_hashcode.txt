/**
 * Autogenerated by Scrooge
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package thrift.android.test;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class Work implements TBase<Work, Work._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Work");

  private static final TField NUM1_FIELD_DESC = new TField("num1", TType.I32, (short)1);
  private static final TField NUM2_FIELD_DESC = new TField("num2", TType.I32, (short)2);
  private static final TField COMMENT_FIELD_DESC = new TField("comment", TType.STRING, (short)3);
  private static final TField TEST_SET_FIELD_DESC = new TField("test_set", TType.SET, (short)4);
  private static final TField D1_FIELD_DESC = new TField("d1", TType.DOUBLE, (short)5);
  private static final TField TEST_MAP_FIELD_DESC = new TField("test_map", TType.MAP, (short)6);
  private static final TField TEST_BINARY_FIELD_DESC = new TField("test_binary", TType.STRING, (short)7);
  private static final TField REQ_INT_FIELD_DESC = new TField("req_int", TType.I64, (short)8);
  private static final TField DAY_FIELD_DESC = new TField("day", TType.I32, (short)9);
  private static final TField OTHER_FIELD_DESC = new TField("other", TType.STRUCT, (short)10);
  private static final TField TEST_LIST_FIELD_DESC = new TField("test_list", TType.LIST, (short)11);
  private static final TField USER_IDS_FIELD_DESC = new TField("user_ids", TType.LIST, (short)12);
  private static final TField OTHER_LIST_FIELD_DESC = new TField("other_list", TType.LIST, (short)13);


  private int num1;
  private int num2;
  private String comment;
  private Set<ByteBuffer> test_set;
  private double d1;
  private Map<String,String> test_map;
  private ByteBuffer test_binary;
  private long req_int;
  private Day day;
  private Other other;
  private List<String> test_list;
  private List<Long> user_ids;
  private List<Other> other_list;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    NUM1((short)1, "num1"),
    NUM2((short)2, "num2"),
    COMMENT((short)3, "comment"),
    TEST_SET((short)4, "test_set"),
    D1((short)5, "d1"),
    TEST_MAP((short)6, "test_map"),
    TEST_BINARY((short)7, "test_binary"),
    REQ_INT((short)8, "req_int"),
    DAY((short)9, "day"),
    OTHER((short)10, "other"),
    TEST_LIST((short)11, "test_list"),
    USER_IDS((short)12, "user_ids"),
    OTHER_LIST((short)13, "other_list");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM1
	return NUM1;
        case 2: // NUM2
	return NUM2;
        case 3: // COMMENT
	return COMMENT;
        case 4: // TEST_SET
	return TEST_SET;
        case 5: // D1
	return D1;
        case 6: // TEST_MAP
	return TEST_MAP;
        case 7: // TEST_BINARY
	return TEST_BINARY;
        case 8: // REQ_INT
	return REQ_INT;
        case 9: // DAY
	return DAY;
        case 10: // OTHER
	return OTHER;
        case 11: // TEST_LIST
	return TEST_LIST;
        case 12: // USER_IDS
	return USER_IDS;
        case 13: // OTHER_LIST
	return OTHER_LIST;
        default:
	return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __NUM1_ISSET_ID = 0;
  private static final int __NUM2_ISSET_ID = 1;
  private static final int __D1_ISSET_ID = 2;
  private static final int __REQ_INT_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM1, new FieldMetaData("num1", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.NUM2, new FieldMetaData("num2", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.COMMENT, new FieldMetaData("comment", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TEST_SET, new FieldMetaData("test_set", TFieldRequirementType.DEFAULT,
      new SetMetaData(TType.SET,
                new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.D1, new FieldMetaData("d1", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.TEST_MAP, new FieldMetaData("test_map", TFieldRequirementType.DEFAULT,
      new MapMetaData(TType.MAP,
            new FieldValueMetaData(TType.STRING),
            new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.TEST_BINARY, new FieldMetaData("test_binary", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.REQ_INT, new FieldMetaData("req_int", TFieldRequirementType.REQUIRED,
      new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.DAY, new FieldMetaData("day", TFieldRequirementType.REQUIRED,
      new EnumMetaData(TType.ENUM, Day.class)));
    tmpMap.put(_Fields.OTHER, new FieldMetaData("other", TFieldRequirementType.REQUIRED,
      new StructMetaData(TType.STRUCT, Other.class)));
    tmpMap.put(_Fields.TEST_LIST, new FieldMetaData("test_list", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.USER_IDS, new FieldMetaData("user_ids", TFieldRequirementType.REQUIRED,
      new ListMetaData(TType.LIST,
                new FieldValueMetaData(TType.I64))));
    tmpMap.put(_Fields.OTHER_LIST, new FieldMetaData("other_list", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, Other.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Work.class, metaDataMap);
  }


  public Work() {
    this.num1 = 0;
    this.day = Day.Mon;
  }

  public Work(
      Integer num1,
      Integer num2,
      String comment,
      Set<ByteBuffer> test_set,
      Double d1,
      Map<String,String> test_map,
      ByteBuffer test_binary,
      Long req_int,
      Day day,
      Other other,
      List<String> test_list,
      List<Long> user_ids,
      List<Other> other_list
  ) {
    this();
    if(num1 != null) {
      this.num1 = num1;
      __isset_bit_vector.set(__NUM1_ISSET_ID, true);

    }
    if(num2 != null) {
      this.num2 = num2;
      __isset_bit_vector.set(__NUM2_ISSET_ID, true);

    }
    if(comment != null) {
      this.comment = comment;
    }
    if(test_set != null) {
      this.test_set = test_set;
    }
    if(d1 != null) {
      this.d1 = d1;
      __isset_bit_vector.set(__D1_ISSET_ID, true);

    }
    if(test_map != null) {
      this.test_map = test_map;
    }
    if(test_binary != null) {
      this.test_binary = test_binary;
    }
    if(req_int != null) {
      this.req_int = req_int;
      __isset_bit_vector.set(__REQ_INT_ISSET_ID, true);

    }
    if(day != null) {
      this.day = day;
    }
    if(other != null) {
      this.other = other;
    }
    if(test_list != null) {
      this.test_list = test_list;
    }
    if(user_ids != null) {
      this.user_ids = user_ids;
    }
    if(other_list != null) {
      this.other_list = other_list;
    }
  }


  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Work(Work other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.num1 = other.num1;
    this.num2 = other.num2;
    if (other.isSet(_Fields.COMMENT)) {
      this.comment = other.comment;
    }
    if (other.isSet(_Fields.TEST_SET)) {
      Set<ByteBuffer> __this__test_set = new HashSet<ByteBuffer>();
      for (ByteBuffer other_element : other.test_set) {
        ByteBuffer temp_binary_element = TBaseHelper.copyBinary(other_element);
        ;
        __this__test_set.add(temp_binary_element);
      }
      this.test_set = __this__test_set;
    }
    this.d1 = other.d1;
    if (other.isSet(_Fields.TEST_MAP)) {
      Map<String,String> __this__test_map = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.test_map.entrySet()) {
        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();
        String __this__test_map_copy_key = other_element_key;
        String __this__test_map_copy_value = other_element_value;
        __this__test_map.put(__this__test_map_copy_key, __this__test_map_copy_value);
      }
      this.test_map = __this__test_map;
    }
    if (other.isSet(_Fields.TEST_BINARY)) {
      this.test_binary = TBaseHelper.copyBinary(other.test_binary);
    }
    this.req_int = other.req_int;
    if (other.isSet(_Fields.DAY)) {
      this.day = other.day;
    }
    if (other.isSet(_Fields.OTHER)) {
      this.other = new Other(other.other);
    }
    if (other.isSet(_Fields.TEST_LIST)) {
      List<String> __this__test_list = new ArrayList<String>();
      for (String other_element : other.test_list) {
        __this__test_list.add(other_element);
      }
      this.test_list = __this__test_list;
    }
    if (other.isSet(_Fields.USER_IDS)) {
      List<Long> __this__user_ids = new ArrayList<Long>();
      for (Long other_element : other.user_ids) {
        __this__user_ids.add(other_element);
      }
      this.user_ids = __this__user_ids;
    }
    if (other.isSet(_Fields.OTHER_LIST)) {
      List<Other> __this__other_list = new ArrayList<Other>();
      for (Other other_element : other.other_list) {
        __this__other_list.add(new Other(other_element));
      }
      this.other_list = __this__other_list;
    }
  }

  public Work deepCopy() {
    return new Work(this);
  }

  @java.lang.Override
  public void clear() {
    this.num1 = 0;
    __isset_bit_vector.set(__NUM2_ISSET_ID, false);
    this.num2 = 0;
    this.comment = null;
    this.test_set = null;
    __isset_bit_vector.set(__D1_ISSET_ID, false);
    this.d1 = 0.0;
    this.test_map = null;
    this.test_binary = null;
    __isset_bit_vector.set(__REQ_INT_ISSET_ID, false);
    this.req_int = 0;
    this.day = Day.Mon;
    this.other = null;
    this.test_list = null;
    this.user_ids = null;
    this.other_list = null;
  }

  @SuppressWarnings("unchecked")
  public void addTo(_Fields field, Object elem) {
    switch(field) {
      case TEST_SET: {
        if (elem instanceof ByteBuffer ) {
          if (this.test_set == null) {
            this.test_set = new HashSet<ByteBuffer>();
          }
          this.test_set.add((ByteBuffer)elem);
        } else {
          throw new IllegalArgumentException("Type of field " + test_set + " should be Set, but found " +  elem.getClass().toString() + " type");
        }
        break;
      }
      case TEST_LIST: {
        if (elem instanceof String ) {
          if (this.test_list == null) {
            this.test_list = new ArrayList<String>();
          }
          this.test_list.add((String)elem);
        } else {
          throw new IllegalArgumentException("Type of field " + test_list + " should be List, but found " +  elem.getClass().toString() + " type");
        }
        break;
      }
      case USER_IDS: {
        if (elem instanceof Long ) {
          if (this.user_ids == null) {
            this.user_ids = new ArrayList<Long>();
          }
          this.user_ids.add((Long)elem);
        } else {
          throw new IllegalArgumentException("Type of field " + user_ids + " should be List, but found " +  elem.getClass().toString() + " type");
        }
        break;
      }
      case OTHER_LIST: {
        if (elem instanceof Other ) {
          if (this.other_list == null) {
            this.other_list = new ArrayList<Other>();
          }
          this.other_list.add((Other)elem);
        } else {
          throw new IllegalArgumentException("Type of field " + other_list + " should be List, but found " +  elem.getClass().toString() + " type");
        }
        break;
      }
    }
  }

  @SuppressWarnings("unchecked")
  public void putTo(_Fields field, Object key, Object value) {
    switch(field) {
        case TEST_MAP: {
        if (key instanceof String && value instanceof String ) {
          if (this.test_map == null) {
            this.test_map = new HashMap<String,String>();
          }
          this.test_map.put((String)key, (String)value);
        } else {
          throw new IllegalArgumentException("[String,String] is expected, but [" +  key.getClass().toString() + ", " + value.getClass().toString() + "] type found.");
        }
        break;
      }
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM1:
      if (value == null) {
        __isset_bit_vector.clear(__NUM1_ISSET_ID);
      } else {
        this.num1 = (Integer) value;
        __isset_bit_vector.set(__NUM1_ISSET_ID, true);
      }
      break;
    case NUM2:
      if (value == null) {
        __isset_bit_vector.clear(__NUM2_ISSET_ID);
      } else {
        this.num2 = (Integer) value;
        __isset_bit_vector.set(__NUM2_ISSET_ID, true);
      }
      break;
    case COMMENT:
      if (value == null) {
        this.comment = null;
      } else {
        this.comment = (String) value;
      }
      break;
    case TEST_SET:
      if (value == null) {
        this.test_set = null;
      } else {
        this.test_set = (Set<ByteBuffer>) value;
      }
      break;
    case D1:
      if (value == null) {
        __isset_bit_vector.clear(__D1_ISSET_ID);
      } else {
        this.d1 = (Double) value;
        __isset_bit_vector.set(__D1_ISSET_ID, true);
      }
      break;
    case TEST_MAP:
      if (value == null) {
        this.test_map = null;
      } else {
        this.test_map = (Map<String,String>) value;
      }
      break;
    case TEST_BINARY:
      if (value == null) {
        this.test_binary = null;
      } else if (value instanceof byte[]) {
        this.test_binary = ByteBuffer.wrap((byte[]) value);
      } else {
        this.test_binary = (ByteBuffer) value;
      }
      break;
    case REQ_INT:
      if (value == null) {
        __isset_bit_vector.clear(__REQ_INT_ISSET_ID);
      } else {
        this.req_int = (Long) value;
        __isset_bit_vector.set(__REQ_INT_ISSET_ID, true);
      }
      break;
    case DAY:
      if (value == null) {
        this.day = null;
      } else {
        this.day = (Day) value;
      }
      break;
    case OTHER:
      if (value == null) {
        this.other = null;
      } else {
        this.other = (Other) value;
      }
      break;
    case TEST_LIST:
      if (value == null) {
        this.test_list = null;
      } else {
        this.test_list = (List<String>) value;
      }
      break;
    case USER_IDS:
      if (value == null) {
        this.user_ids = null;
      } else {
        this.user_ids = (List<Long>) value;
      }
      break;
    case OTHER_LIST:
      if (value == null) {
        this.other_list = null;
      } else {
        this.other_list = (List<Other>) value;
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM1:
      return new Integer(this.num1);
    case NUM2:
      return new Integer(this.num2);
    case COMMENT:
      return this.comment;
    case TEST_SET:
      return this.test_set;
    case D1:
      return new Double(this.d1);
    case TEST_MAP:
      return this.test_map;
    case TEST_BINARY:
      return this.test_binary;
    case REQ_INT:
      return new Long(this.req_int);
    case DAY:
      return this.day;
    case OTHER:
      return this.other;
    case TEST_LIST:
      return this.test_list;
    case USER_IDS:
      return this.user_ids;
    case OTHER_LIST:
      return this.other_list;
    }
    throw new IllegalStateException();
  }

  @SuppressWarnings("unchecked")
  public <Any> Any get(_Fields field) {
    switch(field) {
      case NUM1:
          Any rval_num1 = (Any)((Integer) getFieldValue(field));
          return rval_num1;
      case NUM2:
          Any rval_num2 = (Any)((Integer) getFieldValue(field));
          return rval_num2;
      case COMMENT:
          Any rval_comment = (Any)((String) getFieldValue(field));
          return rval_comment;
      case TEST_SET:
          Any rval_test_set = (Any)((Set<ByteBuffer>) getFieldValue(field));
          return rval_test_set;
      case D1:
          Any rval_d1 = (Any)((Double) getFieldValue(field));
          return rval_d1;
      case TEST_MAP:
          Any rval_test_map = (Any)((Map<String,String>) getFieldValue(field));
          return rval_test_map;
      case TEST_BINARY:
          Any rval_test_binary = (Any)((ByteBuffer) getFieldValue(field));
          return rval_test_binary;
      case REQ_INT:
          Any rval_req_int = (Any)((Long) getFieldValue(field));
          return rval_req_int;
      case DAY:
          Any rval_day = (Any)((Day) getFieldValue(field));
          return rval_day;
      case OTHER:
          Any rval_other = (Any)((Other) getFieldValue(field));
          return rval_other;
      case TEST_LIST:
          Any rval_test_list = (Any)((List<String>) getFieldValue(field));
          return rval_test_list;
      case USER_IDS:
          Any rval_user_ids = (Any)((List<Long>) getFieldValue(field));
          return rval_user_ids;
      case OTHER_LIST:
          Any rval_other_list = (Any)((List<Other>) getFieldValue(field));
          return rval_other_list;
      default:
        throw new IllegalStateException("Invalid field type");
    }
  }

  /** Returns true if field corresponding to field is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case NUM1:
        return __isset_bit_vector.get(__NUM1_ISSET_ID);
    case NUM2:
        return __isset_bit_vector.get(__NUM2_ISSET_ID);
    case COMMENT:
        return comment != null;
    case TEST_SET:
        return test_set != null;
    case D1:
        return __isset_bit_vector.get(__D1_ISSET_ID);
    case TEST_MAP:
        return test_map != null;
    case TEST_BINARY:
        return test_binary != null;
    case REQ_INT:
        return __isset_bit_vector.get(__REQ_INT_ISSET_ID);
    case DAY:
        return day != null;
    case OTHER:
        return other != null;
    case TEST_LIST:
        return test_list != null;
    case USER_IDS:
        return user_ids != null;
    case OTHER_LIST:
        return other_list != null;
    }
    throw new IllegalStateException();
  }

  @java.lang.Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Work)
      return this.equals((Work)that);
    return false;
  }

  public boolean equals(Work that) {
    if (that == null)
      return false;
    boolean this_present_num1 = true;
    boolean that_present_num1 = true;
    if (this_present_num1 || that_present_num1) {
      if (!(this_present_num1 && that_present_num1))
        return false;
      if (this.num1 != that.num1)
        return false;
    }
    boolean this_present_num2 = true;
    boolean that_present_num2 = true;
    if (this_present_num2 || that_present_num2) {
      if (!(this_present_num2 && that_present_num2))
        return false;
      if (this.num2 != that.num2)
        return false;
    }
    boolean this_present_comment = true && this.isSet(_Fields.COMMENT);
    boolean that_present_comment = true && that.isSet(_Fields.COMMENT);
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }
    boolean this_present_test_set = true && this.isSet(_Fields.TEST_SET);
    boolean that_present_test_set = true && that.isSet(_Fields.TEST_SET);
    if (this_present_test_set || that_present_test_set) {
      if (!(this_present_test_set && that_present_test_set))
        return false;
      if (!this.test_set.equals(that.test_set))
        return false;
    }
    boolean this_present_d1 = true;
    boolean that_present_d1 = true;
    if (this_present_d1 || that_present_d1) {
      if (!(this_present_d1 && that_present_d1))
        return false;
      if (this.d1 != that.d1)
        return false;
    }
    boolean this_present_test_map = true && this.isSet(_Fields.TEST_MAP);
    boolean that_present_test_map = true && that.isSet(_Fields.TEST_MAP);
    if (this_present_test_map || that_present_test_map) {
      if (!(this_present_test_map && that_present_test_map))
        return false;
      if (!this.test_map.equals(that.test_map))
        return false;
    }
    boolean this_present_test_binary = true && this.isSet(_Fields.TEST_BINARY);
    boolean that_present_test_binary = true && that.isSet(_Fields.TEST_BINARY);
    if (this_present_test_binary || that_present_test_binary) {
      if (!(this_present_test_binary && that_present_test_binary))
        return false;
      if (!this.test_binary.equals(that.test_binary))
        return false;
    }
    boolean this_present_req_int = true;
    boolean that_present_req_int = true;
    if (this_present_req_int || that_present_req_int) {
      if (!(this_present_req_int && that_present_req_int))
        return false;
      if (this.req_int != that.req_int)
        return false;
    }
    boolean this_present_day = true && this.isSet(_Fields.DAY);
    boolean that_present_day = true && that.isSet(_Fields.DAY);
    if (this_present_day || that_present_day) {
      if (!(this_present_day && that_present_day))
        return false;
      if (!this.day.equals(that.day))
        return false;
    }
    boolean this_present_other = true && this.isSet(_Fields.OTHER);
    boolean that_present_other = true && that.isSet(_Fields.OTHER);
    if (this_present_other || that_present_other) {
      if (!(this_present_other && that_present_other))
        return false;
      if (!this.other.equals(that.other))
        return false;
    }
    boolean this_present_test_list = true && this.isSet(_Fields.TEST_LIST);
    boolean that_present_test_list = true && that.isSet(_Fields.TEST_LIST);
    if (this_present_test_list || that_present_test_list) {
      if (!(this_present_test_list && that_present_test_list))
        return false;
      if (!this.test_list.equals(that.test_list))
        return false;
    }
    boolean this_present_user_ids = true && this.isSet(_Fields.USER_IDS);
    boolean that_present_user_ids = true && that.isSet(_Fields.USER_IDS);
    if (this_present_user_ids || that_present_user_ids) {
      if (!(this_present_user_ids && that_present_user_ids))
        return false;
      if (!this.user_ids.equals(that.user_ids))
        return false;
    }
    boolean this_present_other_list = true && this.isSet(_Fields.OTHER_LIST);
    boolean that_present_other_list = true && that.isSet(_Fields.OTHER_LIST);
    if (this_present_other_list || that_present_other_list) {
      if (!(this_present_other_list && that_present_other_list))
        return false;
      if (!this.other_list.equals(that.other_list))
        return false;
    }

    return true;
  }

  @java.lang.Override
  @SuppressWarnings("unchecked")
  public int hashCode() {
    int hashCode = 1;
    if (true) {
        hashCode = 31 * hashCode + ((Integer)num1).hashCode();
    }
    if (true) {
        hashCode = 31 * hashCode + ((Integer)num2).hashCode();
    }
    if (true && (isSet(_Fields.COMMENT))) {
        hashCode = 31 * hashCode + comment.hashCode();
    }
    if (true && (isSet(_Fields.TEST_SET))) {
        hashCode = 31 * hashCode + test_set.hashCode();
    }
    if (true) {
        hashCode = 31 * hashCode + ((Double)d1).hashCode();
    }
    if (true && (isSet(_Fields.TEST_MAP))) {
        hashCode = 31 * hashCode + test_map.hashCode();
    }
    if (true && (isSet(_Fields.TEST_BINARY))) {
        hashCode = 31 * hashCode + test_binary.hashCode();
    }
    if (true) {
        hashCode = 31 * hashCode + ((Long)req_int).hashCode();
    }
    if (true && (isSet(_Fields.DAY))) {
        hashCode = 31 * hashCode + day.hashCode();
    }
    if (true && (isSet(_Fields.OTHER))) {
        hashCode = 31 * hashCode + other.hashCode();
    }
    if (true && (isSet(_Fields.TEST_LIST))) {
        hashCode = 31 * hashCode + test_list.hashCode();
    }
    if (true && (isSet(_Fields.USER_IDS))) {
        hashCode = 31 * hashCode + user_ids.hashCode();
    }
    if (true && (isSet(_Fields.OTHER_LIST))) {
        hashCode = 31 * hashCode + other_list.hashCode();
    }
    return hashCode;
  }

  public int compareTo(Work other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Work typedOther = (Work)other;

    lastComparison = Boolean.valueOf(isSet(_Fields.NUM1)).compareTo(typedOther.isSet(_Fields.NUM1));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.NUM1)) {
      lastComparison = TBaseHelper.compareTo(this.num1, typedOther.num1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.NUM2)).compareTo(typedOther.isSet(_Fields.NUM2));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.NUM2)) {
      lastComparison = TBaseHelper.compareTo(this.num2, typedOther.num2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.COMMENT)).compareTo(typedOther.isSet(_Fields.COMMENT));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.COMMENT)) {
      lastComparison = TBaseHelper.compareTo(this.comment, typedOther.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.TEST_SET)).compareTo(typedOther.isSet(_Fields.TEST_SET));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.TEST_SET)) {
      lastComparison = TBaseHelper.compareTo(this.test_set, typedOther.test_set);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.D1)).compareTo(typedOther.isSet(_Fields.D1));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.D1)) {
      lastComparison = TBaseHelper.compareTo(this.d1, typedOther.d1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.TEST_MAP)).compareTo(typedOther.isSet(_Fields.TEST_MAP));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.TEST_MAP)) {
      lastComparison = TBaseHelper.compareTo(this.test_map, typedOther.test_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.TEST_BINARY)).compareTo(typedOther.isSet(_Fields.TEST_BINARY));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.TEST_BINARY)) {
      lastComparison = TBaseHelper.compareTo(this.test_binary, typedOther.test_binary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.REQ_INT)).compareTo(typedOther.isSet(_Fields.REQ_INT));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.REQ_INT)) {
      lastComparison = TBaseHelper.compareTo(this.req_int, typedOther.req_int);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.DAY)).compareTo(typedOther.isSet(_Fields.DAY));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.DAY)) {
      lastComparison = TBaseHelper.compareTo(this.day, typedOther.day);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.OTHER)).compareTo(typedOther.isSet(_Fields.OTHER));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.OTHER)) {
      lastComparison = TBaseHelper.compareTo(this.other, typedOther.other);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.TEST_LIST)).compareTo(typedOther.isSet(_Fields.TEST_LIST));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.TEST_LIST)) {
      lastComparison = TBaseHelper.compareTo(this.test_list, typedOther.test_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.USER_IDS)).compareTo(typedOther.isSet(_Fields.USER_IDS));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.USER_IDS)) {
      lastComparison = TBaseHelper.compareTo(this.user_ids, typedOther.user_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.OTHER_LIST)).compareTo(typedOther.isSet(_Fields.OTHER_LIST));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.OTHER_LIST)) {
      lastComparison = TBaseHelper.compareTo(this.other_list, typedOther.other_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // NUM1
          if (field.type == TType.I32) {
            this.num1 = iprot.readI32();
            __isset_bit_vector.set(__NUM1_ISSET_ID, true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NUM2
          if (field.type == TType.I32) {
            this.num2 = iprot.readI32();
            __isset_bit_vector.set(__NUM2_ISSET_ID, true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // COMMENT
          if (field.type == TType.STRING) {
            this.comment = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TEST_SET
          if (field.type == TType.SET) {
            {
            TSet _set0 = iprot.readSetBegin();
            this.test_set = new HashSet<ByteBuffer>(2*_set0.size);
            for (int _i1 = 0; _i1 < _set0.size; ++_i1)
            {
              ByteBuffer _elem2;
              _elem2 = iprot.readBinary();
              this.test_set.add(_elem2);
            }
            iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // D1
          if (field.type == TType.DOUBLE) {
            this.d1 = iprot.readDouble();
            __isset_bit_vector.set(__D1_ISSET_ID, true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // TEST_MAP
          if (field.type == TType.MAP) {
            {
            TMap _map3 = iprot.readMapBegin();
            this.test_map = new HashMap<String,String>(2*_map3.size);
            for (int _i4 = 0; _i4 < _map3.size; ++_i4)
            {
              String _key5;
              String _val6;
              _key5 = iprot.readString();
              _val6 = iprot.readString();
              this.test_map.put(_key5, _val6);
            }
            iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // TEST_BINARY
          if (field.type == TType.STRING) {
            this.test_binary = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // REQ_INT
          if (field.type == TType.I64) {
            this.req_int = iprot.readI64();
            __isset_bit_vector.set(__REQ_INT_ISSET_ID, true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // DAY
          if (field.type == TType.I32) {
            this.day = Day.findByValue(iprot.readI32());
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // OTHER
          if (field.type == TType.STRUCT) {
            this.other = new Other();
            this.other.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // TEST_LIST
          if (field.type == TType.LIST) {
            {
            TList _list7 = iprot.readListBegin();
            this.test_list = new ArrayList<String>(_list7.size);
            for (int _i8 = 0; _i8 < _list7.size; ++_i8)
            {
              String _elem9;
              _elem9 = iprot.readString();
              this.test_list.add(_elem9);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // USER_IDS
          if (field.type == TType.LIST) {
            {
            TList _list10 = iprot.readListBegin();
            this.user_ids = new ArrayList<Long>(_list10.size);
            for (int _i11 = 0; _i11 < _list10.size; ++_i11)
            {
              long _elem12;
              _elem12 = iprot.readI64();
              this.user_ids.add(_elem12);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // OTHER_LIST
          if (field.type == TType.LIST) {
            {
            TList _list13 = iprot.readListBegin();
            this.other_list = new ArrayList<Other>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              Other _elem15;
              _elem15 = new Other();
              _elem15.read(iprot);
              this.other_list.add(_elem15);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSet(_Fields.REQ_INT)) {
      throw new TProtocolException("Required field 'req_int' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(NUM1_FIELD_DESC);
    oprot.writeI32(this.num1);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUM2_FIELD_DESC);
    oprot.writeI32(this.num2);
    oprot.writeFieldEnd();
    if (this.comment != null) {
      if (isSet(_Fields.COMMENT)) {
        oprot.writeFieldBegin(COMMENT_FIELD_DESC);
        oprot.writeString(this.comment);
        oprot.writeFieldEnd();
      }
    }
    if (this.test_set != null) {
      oprot.writeFieldBegin(TEST_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRING, this.test_set.size()));
        for (ByteBuffer _iter16 : this.test_set)
        {
          oprot.writeBinary(_iter16);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(D1_FIELD_DESC);
    oprot.writeDouble(this.d1);
    oprot.writeFieldEnd();
    if (this.test_map != null) {
      oprot.writeFieldBegin(TEST_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.test_map.size()));
        for (Map.Entry<String, String> _iter17 : this.test_map.entrySet())
        {
          oprot.writeString(_iter17.getKey());
          oprot.writeString(_iter17.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.test_binary != null) {
      oprot.writeFieldBegin(TEST_BINARY_FIELD_DESC);
      oprot.writeBinary(this.test_binary);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(REQ_INT_FIELD_DESC);
    oprot.writeI64(this.req_int);
    oprot.writeFieldEnd();
    if (this.day != null) {
      oprot.writeFieldBegin(DAY_FIELD_DESC);
      oprot.writeI32(this.day.getValue());
      oprot.writeFieldEnd();
    }
    if (this.other != null) {
      oprot.writeFieldBegin(OTHER_FIELD_DESC);
      this.other.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.test_list != null) {
      oprot.writeFieldBegin(TEST_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.test_list.size()));
        for (String _iter18 : this.test_list)
        {
          oprot.writeString(_iter18);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.user_ids != null) {
      oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I64, this.user_ids.size()));
        for (long _iter19 : this.user_ids)
        {
          oprot.writeI64(_iter19);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.other_list != null) {
      oprot.writeFieldBegin(OTHER_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.other_list.size()));
        for (Other _iter20 : this.other_list)
        {
          _iter20.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @java.lang.Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Work(");
    boolean first = true;
    sb.append("num1:");
    sb.append(this.num1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num2:");
    sb.append(this.num2);
    first = false;
    if (isSet(_Fields.COMMENT)) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
      }
    if (!first) sb.append(", ");
    sb.append("test_set:");
    if (this.test_set == null) {
      sb.append("null");
    } else {
      sb.append(this.test_set);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("d1:");
    sb.append(this.d1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("test_map:");
    if (this.test_map == null) {
      sb.append("null");
    } else {
      sb.append(this.test_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("test_binary:");
    if (this.test_binary == null) {
      sb.append("null");
    } else {
      TBaseHelper.toString(this.test_binary, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("req_int:");
    sb.append(this.req_int);
    first = false;
    if (!first) sb.append(", ");
    sb.append("day:");
    if (this.day == null) {
      sb.append("null");
    } else {
      sb.append(this.day);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("other:");
    if (this.other == null) {
      sb.append("null");
    } else {
      sb.append(this.other);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("test_list:");
    if (this.test_list == null) {
      sb.append("null");
    } else {
      sb.append(this.test_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user_ids:");
    if (this.user_ids == null) {
      sb.append("null");
    } else {
      sb.append(this.user_ids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("other_list:");
    if (this.other_list == null) {
      sb.append("null");
    } else {
      sb.append(this.other_list);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // alas, we cannot check 'req_int' because it's a primitive and you chose the non-beans generator.
    if (day == null) {
      throw new TProtocolException("Required field 'day' was not present! Struct: " + toString());
    }
    if (other == null) {
      throw new TProtocolException("Required field 'other' was not present! Struct: " + toString());
    }
    if (user_ids == null) {
      throw new TProtocolException("Required field 'user_ids' was not present! Struct: " + toString());
    }
  }

  public static final _Fields NUM1 = _Fields.NUM1;
  public static final _Fields NUM2 = _Fields.NUM2;
  public static final _Fields COMMENT = _Fields.COMMENT;
  public static final _Fields TEST_SET = _Fields.TEST_SET;
  public static final _Fields D1 = _Fields.D1;
  public static final _Fields TEST_MAP = _Fields.TEST_MAP;
  public static final _Fields TEST_BINARY = _Fields.TEST_BINARY;
  public static final _Fields REQ_INT = _Fields.REQ_INT;
  public static final _Fields DAY = _Fields.DAY;
  public static final _Fields OTHER = _Fields.OTHER;
  public static final _Fields TEST_LIST = _Fields.TEST_LIST;
  public static final _Fields USER_IDS = _Fields.USER_IDS;
  public static final _Fields OTHER_LIST = _Fields.OTHER_LIST;

  public static class Builder {
    private Integer num1;
    private Integer num2;
    private String comment;
    private Set<ByteBuffer> test_set;
    private Double d1;
    private Map<String,String> test_map;
    private ByteBuffer test_binary;
    private Long req_int;
    private Day day;
    private Other other;
    private List<String> test_list;
    private List<Long> user_ids;
    private List<Other> other_list;
  @SuppressWarnings("unchecked")
  public Builder set (_Fields field, Object value) {
    switch(field) {
      case NUM1: {
        if (value != null) {
          this.num1 = (Integer) value;
        }
        break;
      }
      case NUM2: {
        if (value != null) {
          this.num2 = (Integer) value;
        }
        break;
      }
      case COMMENT: {
        if (value != null) {
          this.comment = (String) value;
        }
        break;
      }
      case TEST_SET: {
        if (value != null) {
          this.test_set = (Set<ByteBuffer>) value;
        }
        break;
      }
      case D1: {
        if (value != null) {
          this.d1 = (Double) value;
        }
        break;
      }
      case TEST_MAP: {
        if (value != null) {
          this.test_map = (Map<String,String>) value;
        }
        break;
      }
      case TEST_BINARY: {
        if (value != null) {
          this.test_binary = (ByteBuffer) value;
        }
        break;
      }
      case REQ_INT: {
        if (value != null) {
          this.req_int = (Long) value;
        }
        break;
      }
      case DAY: {
        if (value != null) {
          this.day = (Day) value;
        }
        break;
      }
      case OTHER: {
        if (value != null) {
          this.other = (Other) value;
        }
        break;
      }
      case TEST_LIST: {
        if (value != null) {
          this.test_list = (List<String>) value;
        }
        break;
      }
      case USER_IDS: {
        if (value != null) {
          this.user_ids = (List<Long>) value;
        }
        break;
      }
      case OTHER_LIST: {
        if (value != null) {
          this.other_list = (List<Other>) value;
        }
        break;
      }
      default: {
        break;
      }
    }
    return this;
  }
  @SuppressWarnings("unchecked")
  public Builder addTo(_Fields field, Object elem) {
    switch(field) {
      case TEST_SET: {
        if (elem instanceof ByteBuffer ) {
          if (this.test_set == null) {
              this.test_set = new HashSet<ByteBuffer>();
          }
          this.test_set.add((ByteBuffer)elem);
        } else {
          throw new IllegalArgumentException("Type of field " + test_set + " should be Set, but found " +  elem.getClass().toString() + " type");
        }
        break;
      }
      case TEST_LIST: {
        if (elem instanceof String ) {
          if (this.test_list == null) {
              this.test_list = new ArrayList<String>();
          }
          this.test_list.add((String)elem);
        } else {
          throw new IllegalArgumentException("Type of field " + test_list + " should be List, but found " +  elem.getClass().toString() + " type");
        }
        break;
      }
      case USER_IDS: {
        if (elem instanceof Long ) {
          if (this.user_ids == null) {
              this.user_ids = new ArrayList<Long>();
          }
          this.user_ids.add((Long)elem);
        } else {
          throw new IllegalArgumentException("Type of field " + user_ids + " should be List, but found " +  elem.getClass().toString() + " type");
        }
        break;
      }
      case OTHER_LIST: {
        if (elem instanceof Other ) {
          if (this.other_list == null) {
              this.other_list = new ArrayList<Other>();
          }
          this.other_list.add((Other)elem);
        } else {
          throw new IllegalArgumentException("Type of field " + other_list + " should be List, but found " +  elem.getClass().toString() + " type");
        }
        break;
      }
    }
    return this;
  }
  @SuppressWarnings("unchecked")
  public Builder putTo(_Fields field, Object key, Object value) {
    switch(field) {
      case TEST_MAP: {
        if (key instanceof String && value instanceof String ) {
          if (this.test_map == null) {
            this.test_map = new HashMap<String,String>();
          }
          this.test_map.put((String)key, (String)value);
        } else {
          throw new IllegalArgumentException("[String,String] is expected, but [" +  key.getClass().toString() + ", " + value.getClass().toString() + "] type found.");
        }
        break;
      }
    }
    return this;
  }
  public Work build() {
    // check for required fields
    if (this.req_int == null) {
      throw new IllegalArgumentException("Required field 'req_int' was not present! Struct: " + toString());
    }
    if (this.day == null) {
      throw new IllegalArgumentException("Required field 'day' was not present! Struct: " + toString());
    }
    if (this.other == null) {
      throw new IllegalArgumentException("Required field 'other' was not present! Struct: " + toString());
    }
    if (this.user_ids == null) {
      throw new IllegalArgumentException("Required field 'user_ids' was not present! Struct: " + toString());
    }
    return new Work(num1,num2,comment,test_set,d1,test_map,test_binary,req_int,day,other,test_list,user_ids,other_list);
    }
  }
}
