/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class TestUnion extends TUnion<TestUnion, TestUnion._Fields> {
  private static final TStruct STRUCT_DESC = new TStruct("TestUnion");
  private static final TField AN_INT_FIELD_DESC = new TField("an_int", TType.I32, (short)1);
  private static final TField A_STRING_FIELD_DESC = new TField("a_string", TType.STRING, (short)2);
  private static final TField A_SET_FIELD_DESC = new TField("a_set", TType.SET, (short)3);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    AN_INT((short)1, "an_int"),
    A_STRING((short)2, "a_string"),
    A_SET((short)3, "a_set");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AN_INT
          return AN_INT;
        case 2: // A_STRING
          return A_STRING;
        case 3: // A_SET
          return A_SET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AN_INT, new FieldMetaData("an_int", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.A_STRING, new FieldMetaData("a_string", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.A_SET, new FieldMetaData("a_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(TestUnion.class, metaDataMap);
  }

  public TestUnion() {
    super();
  }

  public TestUnion(_Fields setField, Object value) {
    super(setField, value);
  }

  public TestUnion(TestUnion other) {
    super(other);
  }
  public TestUnion deepCopy() {
    return new TestUnion(this);
  }

  public static TestUnion an_int(int value) {
    TestUnion x = new TestUnion();
    x.setAn_int(value);
    return x;
  }

  public static TestUnion a_string(String value) {
    TestUnion x = new TestUnion();
    x.setA_string(value);
    return x;
  }

  public static TestUnion a_set(Set<String> value) {
    TestUnion x = new TestUnion();
    x.setA_set(value);
    return x;
  }


  @java.lang.Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case AN_INT:
        if (value instanceof Integer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Integer for field 'an_int', but got " + value.getClass().getSimpleName());
      case A_STRING:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'a_string', but got " + value.getClass().getSimpleName());
      case A_SET:
        if (value instanceof Set) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Set<String> for field 'a_set', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @java.lang.Override
  protected Object readValue(TProtocol iprot, TField field) throws TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case AN_INT:
          if (field.type == AN_INT_FIELD_DESC.type) {
            Integer an_int;
            an_int = iprot.readI32();
            return an_int;
          } else {
            TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case A_STRING:
          if (field.type == A_STRING_FIELD_DESC.type) {
            String a_string;
            a_string = iprot.readString();
            return a_string;
          } else {
            TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case A_SET:
          if (field.type == A_SET_FIELD_DESC.type) {
            Set<String> a_set;
            {
              TSet _set0 = iprot.readSetBegin();
              a_set = new HashSet<String>(2*_set0.size);
              for (int _i1 = 0; _i1 < _set0.size; ++_i1)
              {
                String _elem2;
                _elem2 = iprot.readString();
                a_set.add(_elem2);
              }
              iprot.readSetEnd();
            }
            return a_set;
          } else {
            TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @java.lang.Override
  protected void writeValue(TProtocol oprot) throws TException {
    switch (setField_) {
      case AN_INT:
        Integer an_int = (Integer)value_;
        oprot.writeI32(an_int);
        return;
      case A_STRING:
        String a_string = (String)value_;
        oprot.writeString(a_string);
        return;
      case A_SET:
        Set<String> a_set = (Set<String>)value_;
        {
          oprot.writeSetBegin(new TSet(TType.STRING, a_set.size()));
          for (String _iter3 : a_set)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeSetEnd();
        }
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @java.lang.Override
  protected TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case AN_INT:
        return AN_INT_FIELD_DESC;
      case A_STRING:
        return A_STRING_FIELD_DESC;
      case A_SET:
        return A_SET_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @java.lang.Override
  protected TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @java.lang.Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public int getAn_int() {
    if (getSetField() == _Fields.AN_INT) {
      return (Integer)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'an_int' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAn_int(int value) {
    setField_ = _Fields.AN_INT;
    value_ = value;
  }

  public String getA_string() {
    if (getSetField() == _Fields.A_STRING) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'a_string' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setA_string(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.A_STRING;
    value_ = value;
  }

  public Set<String> getA_set() {
    if (getSetField() == _Fields.A_SET) {
      return (Set<String>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'a_set' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setA_set(Set<String> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.A_SET;
    value_ = value;
  }

  public boolean equals(Object other) {
    if (other instanceof TestUnion) {
      return equals((TestUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(TestUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @java.lang.Override
  public int compareTo(TestUnion other) {
    int lastComparison = TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  /**
   * If you'd like this to perform more respectably, use the hashcode generator option.
   */
  @java.lang.Override
  public int hashCode() {
    return 0;
  }

}
