/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.twitter.scrooge.integration_apache;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FOOservice {

  public interface Iface {

    public void bar_method(String bar_arg) throws org.apache.thrift.TException;

    public int baz_function(boolean baz_arg1, int bazARG2) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void bar_method(String bar_arg, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.bar_method_call> resultHandler) throws org.apache.thrift.TException;

    public void baz_function(boolean baz_arg1, int bazARG2, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.baz_function_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void bar_method(String bar_arg) throws org.apache.thrift.TException
    {
      send_bar_method(bar_arg);
      recv_bar_method();
    }

    public void send_bar_method(String bar_arg) throws org.apache.thrift.TException
    {
      bar_method_args args = new bar_method_args();
      args.setBar_arg(bar_arg);
      sendBase("bar_method", args);
    }

    public void recv_bar_method() throws org.apache.thrift.TException
    {
      bar_method_result result = new bar_method_result();
      receiveBase(result, "bar_method");
      return;
    }

    public int baz_function(boolean baz_arg1, int bazARG2) throws org.apache.thrift.TException
    {
      send_baz_function(baz_arg1, bazARG2);
      return recv_baz_function();
    }

    public void send_baz_function(boolean baz_arg1, int bazARG2) throws org.apache.thrift.TException
    {
      baz_function_args args = new baz_function_args();
      args.setBaz_arg1(baz_arg1);
      args.setBazARG2(bazARG2);
      sendBase("baz_function", args);
    }

    public int recv_baz_function() throws org.apache.thrift.TException
    {
      baz_function_result result = new baz_function_result();
      receiveBase(result, "baz_function");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "baz_function failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void bar_method(String bar_arg, org.apache.thrift.async.AsyncMethodCallback<bar_method_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bar_method_call method_call = new bar_method_call(bar_arg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bar_method_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bar_arg;
      public bar_method_call(String bar_arg, org.apache.thrift.async.AsyncMethodCallback<bar_method_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bar_arg = bar_arg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bar_method", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bar_method_args args = new bar_method_args();
        args.setBar_arg(bar_arg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_bar_method();
      }
    }

    public void baz_function(boolean baz_arg1, int bazARG2, org.apache.thrift.async.AsyncMethodCallback<baz_function_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      baz_function_call method_call = new baz_function_call(baz_arg1, bazARG2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class baz_function_call extends org.apache.thrift.async.TAsyncMethodCall {
      private boolean baz_arg1;
      private int bazARG2;
      public baz_function_call(boolean baz_arg1, int bazARG2, org.apache.thrift.async.AsyncMethodCallback<baz_function_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.baz_arg1 = baz_arg1;
        this.bazARG2 = bazARG2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("baz_function", org.apache.thrift.protocol.TMessageType.CALL, 0));
        baz_function_args args = new baz_function_args();
        args.setBaz_arg1(baz_arg1);
        args.setBazARG2(bazARG2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_baz_function();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("bar_method", new bar_method());
      processMap.put("baz_function", new baz_function());
      return processMap;
    }

    private static class bar_method<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bar_method_args> {
      public bar_method() {
        super("bar_method");
      }

      public bar_method_args getEmptyArgsInstance() {
        return new bar_method_args();
      }

      public bar_method_result getResult(I iface, bar_method_args args) throws org.apache.thrift.TException {
        bar_method_result result = new bar_method_result();
        iface.bar_method(args.bar_arg);
        return result;
      }
      
    	protected boolean isOneway() {
    		return false;
    	}
    }

    private static class baz_function<I extends Iface> extends org.apache.thrift.ProcessFunction<I, baz_function_args> {
      public baz_function() {
        super("baz_function");
      }

      public baz_function_args getEmptyArgsInstance() {
        return new baz_function_args();
      }

      public baz_function_result getResult(I iface, baz_function_args args) throws org.apache.thrift.TException {
        baz_function_result result = new baz_function_result();
        result.success = iface.baz_function(args.baz_arg1, args.bazARG2);
        result.setSuccessIsSet(true);
        return result;
      }
      
    	protected boolean isOneway() {
    		return false;
    	}
    }

  }

  public static class bar_method_args implements org.apache.thrift.TBase<bar_method_args, bar_method_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bar_method_args");

    private static final org.apache.thrift.protocol.TField BAR_ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("bar_arg", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bar_method_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bar_method_argsTupleSchemeFactory());
    }

    public String bar_arg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BAR_ARG((short)1, "bar_arg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BAR_ARG
            return BAR_ARG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BAR_ARG, new org.apache.thrift.meta_data.FieldMetaData("bar_arg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bar_method_args.class, metaDataMap);
    }

    public bar_method_args() {
    }

    public bar_method_args(
      String bar_arg)
    {
      this();
      this.bar_arg = bar_arg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bar_method_args(bar_method_args other) {
      if (other.isSetBar_arg()) {
        this.bar_arg = other.bar_arg;
      }
    }

    public bar_method_args deepCopy() {
      return new bar_method_args(this);
    }

    @Override
    public void clear() {
      this.bar_arg = null;
    }

    public String getBar_arg() {
      return this.bar_arg;
    }

    public bar_method_args setBar_arg(String bar_arg) {
      this.bar_arg = bar_arg;
      return this;
    }

    public void unsetBar_arg() {
      this.bar_arg = null;
    }

    /** Returns true if field bar_arg is set (has been assigned a value) and false otherwise */
    public boolean isSetBar_arg() {
      return this.bar_arg != null;
    }

    public void setBar_argIsSet(boolean value) {
      if (!value) {
        this.bar_arg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BAR_ARG:
        if (value == null) {
          unsetBar_arg();
        } else {
          setBar_arg((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BAR_ARG:
        return getBar_arg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BAR_ARG:
        return isSetBar_arg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bar_method_args)
        return this.equals((bar_method_args)that);
      return false;
    }

    public boolean equals(bar_method_args that) {
      if (that == null)
        return false;

      boolean this_present_bar_arg = true && this.isSetBar_arg();
      boolean that_present_bar_arg = true && that.isSetBar_arg();
      if (this_present_bar_arg || that_present_bar_arg) {
        if (!(this_present_bar_arg && that_present_bar_arg))
          return false;
        if (!this.bar_arg.equals(that.bar_arg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(bar_method_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      bar_method_args typedOther = (bar_method_args)other;

      lastComparison = Boolean.valueOf(isSetBar_arg()).compareTo(typedOther.isSetBar_arg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBar_arg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bar_arg, typedOther.bar_arg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bar_method_args(");
      boolean first = true;

      sb.append("bar_arg:");
      if (this.bar_arg == null) {
        sb.append("null");
      } else {
        sb.append(this.bar_arg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bar_method_argsStandardSchemeFactory implements SchemeFactory {
      public bar_method_argsStandardScheme getScheme() {
        return new bar_method_argsStandardScheme();
      }
    }

    private static class bar_method_argsStandardScheme extends StandardScheme<bar_method_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bar_method_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BAR_ARG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bar_arg = iprot.readString();
                struct.setBar_argIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bar_method_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bar_arg != null) {
          oprot.writeFieldBegin(BAR_ARG_FIELD_DESC);
          oprot.writeString(struct.bar_arg);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bar_method_argsTupleSchemeFactory implements SchemeFactory {
      public bar_method_argsTupleScheme getScheme() {
        return new bar_method_argsTupleScheme();
      }
    }

    private static class bar_method_argsTupleScheme extends TupleScheme<bar_method_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bar_method_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBar_arg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBar_arg()) {
          oprot.writeString(struct.bar_arg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bar_method_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bar_arg = iprot.readString();
          struct.setBar_argIsSet(true);
        }
      }
    }

  }

  public static class bar_method_result implements org.apache.thrift.TBase<bar_method_result, bar_method_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bar_method_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bar_method_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bar_method_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bar_method_result.class, metaDataMap);
    }

    public bar_method_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bar_method_result(bar_method_result other) {
    }

    public bar_method_result deepCopy() {
      return new bar_method_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bar_method_result)
        return this.equals((bar_method_result)that);
      return false;
    }

    public boolean equals(bar_method_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(bar_method_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      bar_method_result typedOther = (bar_method_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bar_method_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bar_method_resultStandardSchemeFactory implements SchemeFactory {
      public bar_method_resultStandardScheme getScheme() {
        return new bar_method_resultStandardScheme();
      }
    }

    private static class bar_method_resultStandardScheme extends StandardScheme<bar_method_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bar_method_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bar_method_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bar_method_resultTupleSchemeFactory implements SchemeFactory {
      public bar_method_resultTupleScheme getScheme() {
        return new bar_method_resultTupleScheme();
      }
    }

    private static class bar_method_resultTupleScheme extends TupleScheme<bar_method_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bar_method_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bar_method_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class baz_function_args implements org.apache.thrift.TBase<baz_function_args, baz_function_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("baz_function_args");

    private static final org.apache.thrift.protocol.TField BAZ_ARG1_FIELD_DESC = new org.apache.thrift.protocol.TField("baz_arg1", org.apache.thrift.protocol.TType.BOOL, (short)1);
    private static final org.apache.thrift.protocol.TField BAZ_ARG2_FIELD_DESC = new org.apache.thrift.protocol.TField("bazARG2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new baz_function_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new baz_function_argsTupleSchemeFactory());
    }

    public boolean baz_arg1; // required
    public int bazARG2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BAZ_ARG1((short)1, "baz_arg1"),
      BAZ_ARG2((short)2, "bazARG2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BAZ_ARG1
            return BAZ_ARG1;
          case 2: // BAZ_ARG2
            return BAZ_ARG2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BAZ_ARG1_ISSET_ID = 0;
    private static final int __BAZARG2_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BAZ_ARG1, new org.apache.thrift.meta_data.FieldMetaData("baz_arg1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.BAZ_ARG2, new org.apache.thrift.meta_data.FieldMetaData("bazARG2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(baz_function_args.class, metaDataMap);
    }

    public baz_function_args() {
    }

    public baz_function_args(
      boolean baz_arg1,
      int bazARG2)
    {
      this();
      this.baz_arg1 = baz_arg1;
      setBaz_arg1IsSet(true);
      this.bazARG2 = bazARG2;
      setBazARG2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public baz_function_args(baz_function_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.baz_arg1 = other.baz_arg1;
      this.bazARG2 = other.bazARG2;
    }

    public baz_function_args deepCopy() {
      return new baz_function_args(this);
    }

    @Override
    public void clear() {
      setBaz_arg1IsSet(false);
      this.baz_arg1 = false;
      setBazARG2IsSet(false);
      this.bazARG2 = 0;
    }

    public boolean isBaz_arg1() {
      return this.baz_arg1;
    }

    public baz_function_args setBaz_arg1(boolean baz_arg1) {
      this.baz_arg1 = baz_arg1;
      setBaz_arg1IsSet(true);
      return this;
    }

    public void unsetBaz_arg1() {
      __isset_bit_vector.clear(__BAZ_ARG1_ISSET_ID);
    }

    /** Returns true if field baz_arg1 is set (has been assigned a value) and false otherwise */
    public boolean isSetBaz_arg1() {
      return __isset_bit_vector.get(__BAZ_ARG1_ISSET_ID);
    }

    public void setBaz_arg1IsSet(boolean value) {
      __isset_bit_vector.set(__BAZ_ARG1_ISSET_ID, value);
    }

    public int getBazARG2() {
      return this.bazARG2;
    }

    public baz_function_args setBazARG2(int bazARG2) {
      this.bazARG2 = bazARG2;
      setBazARG2IsSet(true);
      return this;
    }

    public void unsetBazARG2() {
      __isset_bit_vector.clear(__BAZARG2_ISSET_ID);
    }

    /** Returns true if field bazARG2 is set (has been assigned a value) and false otherwise */
    public boolean isSetBazARG2() {
      return __isset_bit_vector.get(__BAZARG2_ISSET_ID);
    }

    public void setBazARG2IsSet(boolean value) {
      __isset_bit_vector.set(__BAZARG2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BAZ_ARG1:
        if (value == null) {
          unsetBaz_arg1();
        } else {
          setBaz_arg1((Boolean)value);
        }
        break;

      case BAZ_ARG2:
        if (value == null) {
          unsetBazARG2();
        } else {
          setBazARG2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BAZ_ARG1:
        return Boolean.valueOf(isBaz_arg1());

      case BAZ_ARG2:
        return Integer.valueOf(getBazARG2());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BAZ_ARG1:
        return isSetBaz_arg1();
      case BAZ_ARG2:
        return isSetBazARG2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof baz_function_args)
        return this.equals((baz_function_args)that);
      return false;
    }

    public boolean equals(baz_function_args that) {
      if (that == null)
        return false;

      boolean this_present_baz_arg1 = true;
      boolean that_present_baz_arg1 = true;
      if (this_present_baz_arg1 || that_present_baz_arg1) {
        if (!(this_present_baz_arg1 && that_present_baz_arg1))
          return false;
        if (this.baz_arg1 != that.baz_arg1)
          return false;
      }

      boolean this_present_bazARG2 = true;
      boolean that_present_bazARG2 = true;
      if (this_present_bazARG2 || that_present_bazARG2) {
        if (!(this_present_bazARG2 && that_present_bazARG2))
          return false;
        if (this.bazARG2 != that.bazARG2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(baz_function_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      baz_function_args typedOther = (baz_function_args)other;

      lastComparison = Boolean.valueOf(isSetBaz_arg1()).compareTo(typedOther.isSetBaz_arg1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBaz_arg1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baz_arg1, typedOther.baz_arg1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBazARG2()).compareTo(typedOther.isSetBazARG2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBazARG2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bazARG2, typedOther.bazARG2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("baz_function_args(");
      boolean first = true;

      sb.append("baz_arg1:");
      sb.append(this.baz_arg1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bazARG2:");
      sb.append(this.bazARG2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class baz_function_argsStandardSchemeFactory implements SchemeFactory {
      public baz_function_argsStandardScheme getScheme() {
        return new baz_function_argsStandardScheme();
      }
    }

    private static class baz_function_argsStandardScheme extends StandardScheme<baz_function_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, baz_function_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BAZ_ARG1
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.baz_arg1 = iprot.readBool();
                struct.setBaz_arg1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BAZ_ARG2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bazARG2 = iprot.readI32();
                struct.setBazARG2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, baz_function_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BAZ_ARG1_FIELD_DESC);
        oprot.writeBool(struct.baz_arg1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BAZ_ARG2_FIELD_DESC);
        oprot.writeI32(struct.bazARG2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class baz_function_argsTupleSchemeFactory implements SchemeFactory {
      public baz_function_argsTupleScheme getScheme() {
        return new baz_function_argsTupleScheme();
      }
    }

    private static class baz_function_argsTupleScheme extends TupleScheme<baz_function_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, baz_function_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBaz_arg1()) {
          optionals.set(0);
        }
        if (struct.isSetBazARG2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBaz_arg1()) {
          oprot.writeBool(struct.baz_arg1);
        }
        if (struct.isSetBazARG2()) {
          oprot.writeI32(struct.bazARG2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, baz_function_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.baz_arg1 = iprot.readBool();
          struct.setBaz_arg1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.bazARG2 = iprot.readI32();
          struct.setBazARG2IsSet(true);
        }
      }
    }

  }

  public static class baz_function_result implements org.apache.thrift.TBase<baz_function_result, baz_function_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("baz_function_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new baz_function_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new baz_function_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(baz_function_result.class, metaDataMap);
    }

    public baz_function_result() {
    }

    public baz_function_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public baz_function_result(baz_function_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public baz_function_result deepCopy() {
      return new baz_function_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public baz_function_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof baz_function_result)
        return this.equals((baz_function_result)that);
      return false;
    }

    public boolean equals(baz_function_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(baz_function_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      baz_function_result typedOther = (baz_function_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("baz_function_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class baz_function_resultStandardSchemeFactory implements SchemeFactory {
      public baz_function_resultStandardScheme getScheme() {
        return new baz_function_resultStandardScheme();
      }
    }

    private static class baz_function_resultStandardScheme extends StandardScheme<baz_function_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, baz_function_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, baz_function_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class baz_function_resultTupleSchemeFactory implements SchemeFactory {
      public baz_function_resultTupleScheme getScheme() {
        return new baz_function_resultTupleScheme();
      }
    }

    private static class baz_function_resultTupleScheme extends TupleScheme<baz_function_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, baz_function_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, baz_function_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
