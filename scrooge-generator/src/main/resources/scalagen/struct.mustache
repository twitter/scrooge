{{#public}}
package {{package}}

import com.twitter.io.Buf
import com.twitter.scrooge.{
  InvalidFieldsException,
{{^isException}}
  LazyTProtocol,
{{/isException}}
  StructBuilder,
  StructBuilderFactory,
  TFieldBlob,
  ThriftStruct,
{{^isException}}
  ThriftStructCodec3,
{{/isException}}
  ThriftStructField,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
{{#adapt}}{{^isException}}
import com.twitter.scrooge.adapt.{AccessRecorder, AdaptTProtocol, Decoder}
{{/isException}}{{/adapt}}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.reflect.{ClassTag, classTag}

{{/public}}
{{docstring}}
object {{StructName}} extends ValidatingThriftStructCodec3[{{StructName}}] with StructBuilderFactory[{{StructName}}] {
{{#hasFields}}
  private[this] val _protos: _root_.com.twitter.scrooge.internal.TProtocols = _root_.com.twitter.scrooge.internal.TProtocols()
{{/hasFields}}

  val Struct: TStruct = new TStruct("{{StructNameForWire}}")
{{#fields}}
  val {{fieldConst}}: TField = new TField("{{fieldNameForWire}}", TType.{{constType}}, {{id}})
{{#isEnum}}
  val {{fieldConst}}I32: TField = new TField("{{fieldNameForWire}}", TType.I32, {{id}})
{{/isEnum}}
  val {{fieldConst}}Manifest: Manifest[{{fieldType}}] = manifest[{{fieldType}}]
{{/fields}}

  /**
   * Field information in declaration order.
   */
  {{#hasFields}}lazy {{/hasFields}}val fieldInfos: scala.List[ThriftStructFieldInfo] = {{^hasFields}}Nil{{/hasFields}}{{#hasFields}}scala.List[ThriftStructFieldInfo](
{{#fields}}
    new ThriftStructFieldInfo(
      {{fieldConst}},
      {{optional}},
      {{required}},
      {{fieldConst}}Manifest,
{{#fieldKeyType}}
      _root_.scala.Some(manifest[{{fieldKeyType}}]),
{{/fieldKeyType}}
{{^fieldKeyType}}
      _root_.scala.None,
{{/fieldKeyType}}
{{#fieldValueType}}
      _root_.scala.Some(manifest[{{fieldValueType}}]),
{{/fieldValueType}}
{{^fieldValueType}}
      _root_.scala.None,
{{/fieldValueType}}
{{#fieldTypeAnnotations}}
      immutable$Map(
{{#pairs}}
        ("{{key}}", "{{value}}")
{{/pairs|,}}
      ),
{{/fieldTypeAnnotations}}
{{^fieldTypeAnnotations}}
      immutable$Map.empty[String, String],
{{/fieldTypeAnnotations}}
{{#fieldFieldAnnotations}}
      immutable$Map.apply[String, String](
{{#pairs}}
        ("{{key}}", "{{value}}")
{{/pairs|,}}
      ),
{{/fieldFieldAnnotations}}
{{^fieldFieldAnnotations}}
      immutable$Map.empty[String, String],
{{/fieldFieldAnnotations}}
{{#hasDefaultFieldValueForFieldInfo}}
      Some[{{fieldType}}]({{defaultFieldValueForFieldInfo}}),
{{/hasDefaultFieldValueForFieldInfo}}
{{^hasDefaultFieldValueForFieldInfo}}
      None,
{{/hasDefaultFieldValueForFieldInfo}}
      _root_.scala.Option({{unsafeEmptyReadValue}})
    )
{{/fields|,}}
  )
{{/hasFields}}

  {{#structAnnotations}}lazy {{/structAnnotations}}val structAnnotations: immutable$Map[String, String] =
{{#structAnnotations}}
    immutable$Map[String, String](
{{#pairs}}
        ("{{key}}", "{{value}}")
{{/pairs|,}}
    )
{{/structAnnotations}}
{{^structAnnotations}}
    immutable$Map.empty[String, String]
{{/structAnnotations}}

  private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq[ClassTag[_]](
{{#fields}}
    classTag[{{>constructionOptionalType}}].asInstanceOf[ClassTag[_]]
{{/fields|,}}
  )

  private[this] val structFields: Seq[ThriftStructField[{{StructName}}]] = Seq[ThriftStructField[{{StructName}}]](
{{#fields}}
    new ThriftStructField[{{StructName}}](
      {{fieldConst}},
      _root_.scala.Some({{fieldConst}}Manifest),
      classOf[{{StructName}}]) {
        def getValue[R](struct: {{StructName}}): R = struct.{{fieldName}}.asInstanceOf[R]
    }
{{/fields|,}}
  )

  override lazy val metaData: ThriftStructMetaData[{{StructName}}] =
    ThriftStructMetaData(this, structFields, fieldInfos, Nil, structAnnotations)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: {{StructName}}): Unit = {
{{#fields}}
{{#required}}
{{#nullable}}
    if (_item.{{fieldName}} eq null) throw new TProtocolException("Required field {{fieldName}} cannot be null")
{{/nullable}}
{{/required}}
{{/fields}}
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: {{StructName}}): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

{{#fields}}
{{#constructionRequired}}
    if (item.{{fieldName}}.isEmpty)
      buf += com.twitter.scrooge.validation.MissingConstructionRequiredField(
        fieldInfos.apply({{index}})
      )
{{/constructionRequired}}
{{#required}}
{{#nullable}}
    if (item.{{fieldName}} eq null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply({{index}}))
{{/nullable}}
{{/required}}
    buf ++= validateField(item.{{fieldName}})
{{/fields}}
    buf.toList
  }

  /**
   * Validate that all validation annotations on the struct meet the criteria defined in the
   * corresponding [[com.twitter.scrooge.validation.ThriftConstraintValidator]].
   */
  def validateInstanceValue(item: {{StructName}}): Set[com.twitter.scrooge.validation.ThriftValidationViolation] = {
    val thriftValidator = {{validator}}
    val violations = scala.collection.mutable.Set.empty[com.twitter.scrooge.validation.ThriftValidationViolation]
{{#fields}}
    violations ++= validateFieldValue("{{fieldNameForWire}}", item.{{fieldName}}, fieldInfos.apply({{index}}).fieldAnnotations, thriftValidator);
{{/fields}}
    violations.toSet
  }

  def withoutPassthroughFields(original: {{StructName}}): {{StructName}} =
    new {{InstanceClassName}}(
{{#fields}}
{{#hasPassthroughFields}}
      {{fieldName}} =
        {
          val field = original.{{fieldName}}
          {{#passthroughFields}}{{>withoutPassthrough}}{{/passthroughFields}}
        }
{{/hasPassthroughFields}}
{{^hasPassthroughFields}}
      {{fieldName}} = original.{{fieldName}}
{{/hasPassthroughFields}}
{{/fields|,}}
    )

  lazy val unsafeEmpty: {{StructName}} = {
{{#fields}}
{{#optional}}
    val {{fieldName}}: _root_.scala.Option[{{fieldType}}] = _root_.scala.None
{{/optional}}
{{^optional}}
    val {{fieldName}}: {{fieldType}} = {{unsafeEmptyReadValue}}
{{/optional}}
{{/fields}}

    new {{InstanceClassName}}(
{{#fields}}
      {{fieldName}},
{{/fields}}
      _root_.com.twitter.scrooge.internal.TProtocols.NoPassthroughFields
    )
  }

  def newBuilder(): StructBuilder[{{StructName}}] = new {{StructName}}StructBuilder(_root_.scala.None, fieldTypes)

  override def encode(_item: {{StructName}}, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

{{#adapt}}
{{#withTrait}}
  @volatile private[this] var adaptiveDecoder: Decoder[{{StructName}}] = _

  private[this] val accessRecordingDecoderBuilder: AccessRecorder => Decoder[{{StructName}}] = { accessRecorder =>
    new Decoder[{{StructName}}] {
      def apply(prot: AdaptTProtocol): {{StructName}} = new AccessRecordingWrapper(decodeInternal(prot, true), accessRecorder)
    }
  }
  private[this] val fallbackDecoder = new Decoder[{{StructName}}] {
    def apply(prot: AdaptTProtocol): {{StructName}} = decodeInternal(prot, true)
  }
  private[this] def adaptiveDecode(_iprot: AdaptTProtocol): {{StructName}} = {
    val adaptContext = _iprot.adaptContext
    val reloadRequired = adaptContext.shouldReloadDecoder
    synchronized {
      if ((adaptiveDecoder eq null) || reloadRequired) {
        adaptiveDecoder = adaptContext.buildDecoder(this, fallbackDecoder, accessRecordingDecoderBuilder)
      }
    }
    adaptiveDecoder(_iprot)
  }

  /**
   * AccessRecordingWrapper keeps track of fields that are accessed while
   * delegating to underlying struct.
   */
  private[this] class AccessRecordingWrapper(underlying: {{StructName}}, accessRecorder: AccessRecorder) extends {{StructName}} {
{{#fields}}
    override def {{fieldName}}: {{>optionalType}} = {
      accessRecorder.fieldAccessed({{id}})
      underlying.{{fieldName}}
    }
{{/fields}}
    override def write(_oprot: TProtocol): Unit = underlying.write(_oprot)

    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = underlying._passthroughFields
  }
{{/withTrait}}
{{/adapt}}

{{#withTrait}}
  override def decode(_iprot: TProtocol): {{StructName}} = {
    if (_iprot.isInstanceOf[LazyTProtocol]) {
      decodeInternal(_iprot, true)
{{#adapt}}
    } else if (_iprot.isInstanceOf[AdaptTProtocol]) {
      adaptiveDecode(_iprot.asInstanceOf[AdaptTProtocol])
{{/adapt}}
    } else {
      decodeInternal(_iprot, false)
    }
  }

  private[{{packageName}}] def eagerDecode(_iprot: TProtocol): {{StructName}} = {
{{/withTrait}}
{{^withTrait}}
  override def decode(_iprot: TProtocol): {{StructName}} = {
{{/withTrait}}
    decodeInternal(_iprot, false)
  }

  private[this] def decodeInternal(_iprot: TProtocol, lazily: Boolean): {{StructName}} = {
{{#fields}}
{{#withTrait}}
{{#isLazyReadEnabled}}
    var {{fieldNameForWire}}Offset: Int = -1
{{/isLazyReadEnabled}}
{{/withTrait}}
{{#optional}}
    var {{fieldName}}: Option[{{fieldType}}] = None
{{/optional}}
{{^optional}}
    var {{fieldName}}: {{fieldType}} = {{defaultReadValue}}
{{/optional}}
{{#required}}
    var {{gotName}} = false
{{/required}}
{{/fields}}

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
{{#withTrait}}
    val _start_offset = if (lazily) _iprot.asInstanceOf[LazyTProtocol].offset else -1
{{/withTrait}}

    _iprot.readStructBegin()
    do {
      val _field = _iprot.readFieldBegin()
      val _fieldType = _field.`type`
      if (_fieldType == TType.STOP) {
        _done = true
      } else {
{{#hasFields}}
        _field.id match {
{{#fields}}
          case {{id}} =>
            {{>readLazyField}}
{{/fields}}
          case _ =>
            _passthroughFields = _root_.com.twitter.scrooge.internal.TProtocols.readPassthroughField(_iprot, _field, _passthroughFields)
        }
{{/hasFields}}
{{^hasFields}}{{! it is common to see structs without fields where everything is a passthrough }}
        _passthroughFields = _root_.com.twitter.scrooge.internal.TProtocols.readPassthroughField(_iprot, _field, _passthroughFields)
{{/hasFields}}
        _iprot.readFieldEnd()
      }
    } while (!_done)
    _iprot.readStructEnd()

{{#fields}}
{{#required}}
    if (!{{gotName}}) _root_.com.twitter.scrooge.internal.TProtocols.throwMissingRequiredField("{{StructName}}", "{{fieldName}}")
{{/required}}
{{/fields}}

    val _passthroughFieldsResult =
      if (_passthroughFields eq null) _root_.com.twitter.scrooge.internal.TProtocols.NoPassthroughFields
      else _passthroughFields.result()
{{#withTrait}}
    if (lazily) {
      val _lazyProt = _iprot.asInstanceOf[LazyTProtocol]
      new Lazy{{InstanceClassName}}(
        _lazyProt,
        _lazyProt.buffer,
        _start_offset,
        _lazyProt.offset,
{{#fields}}
        {{#isLazyReadEnabled}}{{fieldNameForWire}}Offset{{/isLazyReadEnabled}}{{^isLazyReadEnabled}}{{fieldName}}{{/isLazyReadEnabled}},
{{/fields}}
        _passthroughFieldsResult
      )
    } else {
      new {{InstanceClassName}}(
{{#fields}}
        {{fieldName}},
{{/fields}}
        _passthroughFieldsResult
      )
    }
{{/withTrait}}
{{^withTrait}}
    new {{InstanceClassName}}(
{{#fields}}
      {{fieldName}},
{{/fields}}
      _passthroughFieldsResult
    )
{{/withTrait}}
  }

  def apply(
{{#fields}}
    {{fieldName}}: {{>constructionOptionalType}}{{#hasAlternateDefaultValue}} = {{alternateDefaultFieldValue}}{{/hasAlternateDefaultValue}}{{#constructionOptional}} = _root_.scala.None{{/constructionOptional}}
{{/fields|,}}
  ): {{StructName}} =
    new {{InstanceClassName}}(
{{#fields}}
      {{fieldName}}
{{/fields|,}}
    )

{{#arity0}}
  def unapply(_item: {{StructName}}): Boolean = true
{{/arity0}}
{{#arity1}}
  def unapply(_item: {{StructName}}): _root_.scala.Some[{{>optionalType}}] = _root_.scala.Some(_item.{{fieldName}})
{{/arity1}}
{{#arityN}}
  def unapply(_item: {{StructName}}): _root_.scala.Some[{{tuple}}] = _root_.scala.Some(_item.toTuple)
{{/arityN}}


{{#fields}}
{{#readWriteInfo}}
{{#isCollection}}
  private[{{packageName}}] def {{readFieldValueName}}(_iprot: TProtocol): {{fieldType}} = {
    {{>readValue}}
  }

  private def {{writeFieldValueName}}(_oprot: TProtocol, _value: {{fieldType}}): Unit = {
    {{>writeValue}}
  }

{{/isCollection}}
{{/readWriteInfo}}
{{/fields}}

{{#withTrait}}
  object Immutable extends ThriftStructCodec3[{{StructName}}] {
    override def encode(_item: {{StructName}}, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): {{StructName}} = {{StructName}}.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[{{StructName}}] = {{StructName}}.metaData
  }

  /**
   * The default read-only implementation of {{StructName}}.  You typically should not need to
   * directly reference this class; instead, use the {{StructName}}.apply method to construct
   * new instances.
   */{{! Immutable should have 2 public constructors. If it hasConstructionRequiredFields we add two new constructors and make the ones that take Option for construction required fields package private.}}
  class Immutable{{#hasConstructionRequiredFields}} private[{{packageName}}]{{/hasConstructionRequiredFields}}(
{{#fields}}
      val {{fieldName}}: {{>optionalType}},
{{/fields}}
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends {{StructName}} {
    {{#hasConstructionRequiredFields}}private[{{packageName}}] {{/hasConstructionRequiredFields}}def this(
{{#fields}}{{! If we will generate a different public constructor that has default values, do not provide default values in this constructor.}}
      {{fieldName}}: {{>optionalType}}{{^hasConstructionRequiredFields}}{{#hasDefaultValue}} = {{defaultFieldValue}}{{/hasDefaultValue}}{{#optional}} = _root_.scala.None{{/optional}}{{/hasConstructionRequiredFields}}
{{/fields|,}}
    ) = this(
{{#fields}}
      {{fieldName}},
{{/fields}}
      immutable$Map.empty[Short, TFieldBlob]
    )
{{#hasConstructionRequiredFields}}
  def this(
{{#fields}}
      {{fieldName}}: {{>constructionOptionalType}}{{#hasAlternateDefaultValue}} = {{alternateDefaultFieldValue}}{{/hasAlternateDefaultValue}}{{#constructionOptional}} = _root_.scala.None{{/constructionOptional}}
{{/fields|,}}
    ) = this(
{{#fields}}
{{#constructionRequired}}
      Some({{fieldName}}),
{{/constructionRequired}}
{{^constructionRequired}}
      {{fieldName}},
{{/constructionRequired}}
{{/fields}}
      immutable$Map.empty[Short, TFieldBlob]
    )
  def this(
{{#fields}}
      {{fieldName}}: {{>constructionOptionalType}},
{{/fields}}
      _passthroughFields: immutable$Map[Short, TFieldBlob]
  ) = this(
{{#fields}}
{{#constructionRequired}}
      Some({{fieldName}}),
{{/constructionRequired}}
{{^constructionRequired}}
      {{fieldName}},
{{/constructionRequired}}
{{/fields}}
      _passthroughFields
  )
{{/hasConstructionRequiredFields}}
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class Lazy{{InstanceClassName}}(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
{{#fields}}
      {{#isLazyReadEnabled}}{{fieldNameForWire}}Offset: Int,{{/isLazyReadEnabled}}{{^isLazyReadEnabled}}val {{fieldName}}: {{>optionalType}},{{/isLazyReadEnabled}}
{{/fields}}
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends {{StructName}} {

    override def write(_oprot: TProtocol): Unit = {
      if (_oprot.isInstanceOf[LazyTProtocol]) {
        _oprot.asInstanceOf[LazyTProtocol].writeRaw(_buf, _start_offset, _end_offset - _start_offset)
      } else {
        super.write(_oprot)
      }
    }

{{#fields}}
{{#isLazyReadEnabled}}
    lazy val {{fieldName}}: {{>optionalType}} =
{{#optional}}
      if ({{fieldNameForWire}}Offset == -1)
        None
      else {
        Some(_proto.{{decodeProtocol}}(_buf, {{fieldNameForWire}}Offset))
      }
{{/optional}}
{{^optional}}
      if ({{fieldNameForWire}}Offset == -1)
        {{defaultReadValue}}
      else {
        _proto.{{decodeProtocol}}(_buf, {{fieldNameForWire}}Offset)
      }
{{/optional}}
{{/isLazyReadEnabled}}
{{/fields}}

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode: Int = super.hashCode
  }

{{#generateStructProxy}}
  /**
   * This Proxy trait allows you to extend the {{StructName}} trait with additional state or
   * behavior and implement the read-only methods from {{StructName}} using an underlying
   * instance.
   */
  trait Proxy extends {{StructName}} {
    protected def {{underlyingStructName}}: {{StructName}}
{{#fields}}
    override def {{fieldName}}: {{>optionalType}} = {{underlyingStructName}}.{{fieldName}}
{{/fields}}
    override def _passthroughFields: immutable$Map[Short, TFieldBlob] = {{underlyingStructName}}._passthroughFields
  }
{{/generateStructProxy}}
{{/withTrait}}
}

{{#withTrait}}
/**
 * Prefer the companion object's [[{{package}}.{{StructName}}.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait {{StructName}}
{{/withTrait}}
{{^withTrait}}
{{#isException}}
/**
 * Prefer the companion object's [[{{package}}.{{StructName}}.apply]]
 * for construction if you don't need to specify passthrough or
 * flags.
 */
{{/isException}}
class {{StructName}}(
{{#fields}}
    val {{fieldName}}: {{>optionalType}},
{{/fields}}
{{#hasFailureFlags}}
    val _passthroughFields: immutable$Map[Short, TFieldBlob],
    val flags: Long)
{{/hasFailureFlags}}
{{^hasFailureFlags}}
    val _passthroughFields: immutable$Map[Short, TFieldBlob])
{{/hasFailureFlags}}
{{/withTrait}}
  extends {{parentType}}
  with {{product}}
  with ValidatingThriftStruct[{{StructName}}]
  with java.io.Serializable
{{#hasFailureFlags}}
  with _root_.com.twitter.finagle.FailureFlags[{{StructName}}]
{{/hasFailureFlags}}
{
  import {{StructName}}._
{{^withTrait}}
{{#hasFailureFlags}}

  def this(
{{#fields}}
    {{fieldName}}: {{>optionalType}},
{{/fields}}
    _passthroughFields: immutable$Map[Short, TFieldBlob]
  ) = this(
{{#fields}}
    {{fieldName}},
{{/fields}}
    _passthroughFields,
    _root_.com.twitter.finagle.FailureFlags.Empty
  )
{{/hasFailureFlags}}

  def this(
{{#fields}}
    {{fieldName}}: {{>optionalType}}{{#hasDefaultValue}} = {{defaultFieldValue}}{{/hasDefaultValue}}{{#optional}} = _root_.scala.None{{/optional}}
{{/fields|,}}
  ) = this(
{{#fields}}
    {{fieldName}},
{{/fields}}
    immutable$Map.empty
  )
{{/withTrait}}
{{#withTrait}}

{{#fields}}
{{#docstring}}
  {{docstring}}
{{/docstring}}
  def {{fieldName}}: {{>optionalType}}
{{/fields}}

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty
{{/withTrait}}

{{#fields}}
  def _{{indexP1}}: {{>optionalType}} = {{fieldName}}
{{/fields}}

{{#arityN}}
  def toTuple: {{tuple}} =
    {{tuple}}(
{{#fields}}
      {{fieldName}}
{{/fields|,}}
    )

{{/arityN}}
{{#isResponse}}
  def successField: Option[{{successFieldType}}] = {{successFieldValue}}
  def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = {{exceptionValues}}
{{/isResponse}}

{{#withFieldGettersAndSetters}}
  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    val passedthroughValue = _passthroughFields.get(_fieldId)
    if (passedthroughValue.isDefined) {
      passedthroughValue
    } else {
{{#hasFields}}
      val _protos = _root_.com.twitter.scrooge.internal.TProtocols()
      val _buff = new TMemoryBuffer(32)
      val _oprot = new TCompactProtocol(_buff)

      val _fieldOpt: _root_.scala.Option[TField] = _fieldId match {
{{#fields}}
        case {{id}} =>
{{#readWriteInfo}}
{{#optional}}
          if ({{fieldName}}.isDefined) {
{{/optional}}
{{^optional}}
{{#nullable}}
          if ({{fieldName}} ne null) {
{{/nullable}}
{{/optional}}
            {{writeValueOrMethod}}
            _root_.scala.Some({{StructName}}.{{fieldConst}})
{{#optional}}
          } else {
            _root_.scala.None
          }
{{/optional}}
{{^optional}}
{{#nullable}}
          } else {
            _root_.scala.None
          }
{{/nullable}}
{{/optional}}
{{/readWriteInfo}}
{{/fields}}
        case _ => _root_.scala.None
      }
      if (_fieldOpt.isDefined) {
        _root_.scala.Some(TFieldBlob(_fieldOpt.get, Buf.ByteArray.Owned(_buff.getArray)))
      } else {
        _root_.scala.None
      }
{{/hasFields}}
{{^hasFields}}
      _root_.scala.None
{{/hasFields}}
    }
  }


  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids.flatMap { id => getFieldBlob(id).map { fieldBlob => (id, fieldBlob) } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): {{StructName}} = {
{{#hasFields}}
    val _protos: _root_.com.twitter.scrooge.internal.TProtocols = _root_.com.twitter.scrooge.internal.TProtocols()
{{/hasFields}}
{{#fields}}
    var {{fieldName}}: {{>optionalType}} = this.{{fieldName}}
{{/fields}}
    var _passthroughFields = this._passthroughFields
    val _iprot = _blob.read {{! alias the TProtocol to the expected field name }}
    _blob.id match {
{{#fields}}
{{#readWriteInfo}}
      case {{id}} =>
{{#optional}}
        {{fieldName}} = _root_.scala.Some({{readFieldValueOrMethod}})
{{/optional}}
{{^optional}}
        {{fieldName}} = {{readFieldValueOrMethod}}
{{/optional}}
{{/readWriteInfo}}
{{/fields}}
      case _ => _passthroughFields += _root_.scala.Tuple2(_blob.id, _blob)
    }
    new {{InstanceClassName}}(
{{#fields}}
      {{fieldName}},
{{/fields}}
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): {{StructName}} = {
{{#hasFields}}
{{#fields}}
    var {{fieldName}}: {{>optionalType}} = this.{{fieldName}}
{{/fields}}

    _fieldId match {
{{#fields}}
      case {{id}} =>
{{#optional}}
        {{fieldName}} = _root_.scala.None
{{/optional}}
{{^optional}}
        {{fieldName}} = {{defaultReadValue}}
{{/optional}}
{{/fields}}
      case _ =>
    }
{{/hasFields}}
    new {{InstanceClassName}}(
{{#fields}}
      {{fieldName}},
{{/fields}}
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
{{#fields}}
  def {{unsetName}}: {{StructName}} = unsetField({{id}})

{{/fields}}
{{/withFieldGettersAndSetters}}

  override def write(_oprot: TProtocol): Unit = {
    {{StructName}}.validate(this)
    val _protos = _root_.com.twitter.scrooge.internal.TProtocols()
    _oprot.writeStructBegin(Struct)
{{#fields}}
{{#readWriteInfo}}
{{#optional}}
    if ({{fieldName}}.isDefined) {
      _oprot.writeFieldBegin({{fieldConst}}{{#isEnum}}I32{{/isEnum}})
      {{writeValueOrMethod}}
      _oprot.writeFieldEnd()
    }
{{/optional}}
{{^optional}}
{{#nullable}}
    if ({{fieldName}} ne null) {
      _oprot.writeFieldBegin({{fieldConst}}{{#isEnum}}I32{{/isEnum}})
      {{writeValueOrMethod}}
      _oprot.writeFieldEnd()
    }
{{/nullable}}
{{^nullable}}
    _oprot.writeFieldBegin({{fieldConst}}{{#isEnum}}I32{{/isEnum}})
    {{writeValueOrMethod}}
    _oprot.writeFieldEnd()
{{/nullable}}
{{/optional}}
{{/readWriteInfo}}
{{/fields}}
    _root_.com.twitter.scrooge.internal.TProtocols.finishWritingStruct(_oprot, _passthroughFields)
  }

  def copy(
{{#fields}}
{{^constructionRequired}}
    {{fieldName}}: {{>optionalType}} = this.{{fieldName}},
{{/constructionRequired}}
{{/fields}}
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): {{StructName}} =
    new {{InstanceClassName}}(
{{#fields}}
{{#constructionRequired}}
      this.{{fieldName}},
{{/constructionRequired}}
{{^constructionRequired}}
      {{fieldName}},
{{/constructionRequired}}
{{/fields}}
      _passthroughFields
    )

{{#hasConstructionRequiredFields}}
  /**
   * Construction required fields need a different copy API than all the other fields. If a Some
   * argument is provided, then that value will change. None arguments mean that there is no change
   * to the field.
   */
  def copyChangingConstructionRequiredFields(
{{#fields}}
{{#constructionRequired}}
    {{fieldName}}: {{>optionalType}} = None,
{{/constructionRequired}}
{{/fields}}
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): {{StructName}} =
    new {{InstanceClassName}}(
{{#fields}}
{{#constructionRequired}}
      {{fieldName}}.orElse(this.{{fieldName}}),
{{/constructionRequired}}
{{^constructionRequired}}
      this.{{fieldName}},
{{/constructionRequired}}
{{/fields}}
      _passthroughFields
    )

{{/hasConstructionRequiredFields}}
  override def canEqual(other: Any): Boolean = other.isInstanceOf[{{StructName}}]

  private[this] def _equals(other: {{StructName}}): Boolean =
      this.productArity == other.productArity &&
      this.productIterator.sameElements(other.productIterator) &&
{{#hasFailureFlags}}
      this.flags == other.flags &&
{{/hasFailureFlags}}
      this._passthroughFields == other._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) && _equals(other.asInstanceOf[{{StructName}}])

  override def hashCode: Int = {
{{#hasFailureFlags}}
    31 * _root_.scala.runtime.ScalaRunTime._hashCode(this) +
      _root_.java.lang.Long.hashCode(this.flags)
{{/hasFailureFlags}}
{{^hasFailureFlags}}
    _root_.scala.runtime.ScalaRunTime._hashCode(this)
{{/hasFailureFlags}}
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)

{{#hasExceptionMessage}}
  override def getMessage: String = String.valueOf({{exceptionMessageField}})

{{/hasExceptionMessage}}
{{^arity1ThroughN}}
  override def productArity: Int = {{arity}}

{{#arity0}}
  override def productElement(n: Int): Any = throw new IndexOutOfBoundsException(_root_.java.lang.Integer.toString(n))
{{/arity0}}
{{^arity0}}
  override def productElement(n: Int): Any = n match {
{{#fields}}
    case {{index}} => this.{{fieldName}}
{{/fields}}
    case _ => throw new IndexOutOfBoundsException(_root_.java.lang.Integer.toString(n))
  }
{{/arity0}}

{{/arity1ThroughN}}
  override def productPrefix: String = "{{StructName}}"

  def _codec: ValidatingThriftStructCodec3[{{StructName}}] = {{StructName}}
{{#hasFailureFlags}}

  protected def copyWithFlags(flags: Long): {{StructName}} =
    new {{StructName}}(
{{#fields}}
      {{fieldName}},
{{/fields}}
      _passthroughFields,
      flags
    )
{{/hasFailureFlags}}

  def newBuilder(): StructBuilder[{{StructName}}] = new {{StructName}}StructBuilder(_root_.scala.Some(this), fieldTypes)
}

private[{{packageName}}] class {{StructName}}StructBuilder(instance: _root_.scala.Option[{{StructName}}], fieldTypes: IndexedSeq[ClassTag[_]])
    extends StructBuilder[{{StructName}}](fieldTypes) {

  def build(): {{StructName}} = {
{{#hasFields}}
    val _fieldArray = fieldArray // shadow variable
    if (instance.isDefined) {
      val instanceValue = instance.get
      {{StructName}}(
{{#fields}}
        if (_fieldArray({{index}}) == null) instanceValue.{{fieldName}}{{#constructionRequired}}.get{{/constructionRequired}} else _fieldArray({{index}}).asInstanceOf[{{>constructionOptionalType}}]
{{/fields|,}}
      )
    } else {
      if (genericArrayOps(_fieldArray).contains(null)) throw new InvalidFieldsException(structBuildError("{{StructName}}"))
      {{StructName}}(
{{#fields}}
        _fieldArray({{index}}).asInstanceOf[{{>constructionOptionalType}}]
{{/fields|,}}
      )
    }
{{/hasFields}}
{{^hasFields}}
    {{StructName}}()
{{/hasFields}}
  }
}

{{#adapt}}
{{#withTrait}}
private class {{StructName}}__AdaptDecoder {

  def decode(_iprot: AdaptTProtocol): {{StructName}} = {
    import {{StructName}}._
    val _protos: _root_.com.twitter.scrooge.internal.TProtocols = _root_.com.twitter.scrooge.internal.TProtocols()
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    val adapt = new {{StructName}}__Adapt(
      _iprot,
      _iprot.buffer,
      _start_offset)

{{#fields}}
{{#required}}
    var {{gotName}} = false
{{/required}}
    AdaptTProtocol.usedStartMarker({{id}})
{{#optional}}
    var {{fieldName}}: _root_.scala.Option[{{fieldType}}] = _root_.scala.None
{{! Set the default value for optional fields in adapt struct }}
    adapt.{{setName}}({{fieldName}})
{{/optional}}
{{^optional}}
    var {{fieldName}}: {{fieldType}} = {{defaultReadValue}}
{{#hasDefaultValue}}
{{! Optional fields with default values appear as required but may not be present in bytes and need to be set to default value. }}
    adapt.{{setName}}({{fieldName}})
{{/hasDefaultValue}}
{{/optional}}
    AdaptTProtocol.usedEndMarker({{id}})

{{/fields}}
    _iprot.readStructBegin()
    do {
      val _field = _iprot.readFieldBegin()
      val _fieldType = _field.`type`
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
{{#fields}}
          case {{id}} => {
            {{>readAdaptField}}
          }
{{/fields}}
          case _ =>
            if (_passthroughFields eq null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += _root_.scala.Tuple2(_field.id, TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    } while (!_done)
    _iprot.readStructEnd()

{{#fields}}
{{#required}}
    if (!{{gotName}}) throw new TProtocolException("Required field '{{fieldName}}' was not found in serialized data for struct {{StructName}}")
{{/required}}
{{/fields}}
    adapt.set__endOffset(_iprot.offset)
    if (_passthroughFields ne null) {
      adapt.set__passthroughFields(_passthroughFields.result())
    }
    adapt
  }
}

/**
 * This is the base template for Adaptive decoding. This class gets pruned and
 * reloaded at runtime.
 */
private class {{StructName}}__Adapt(
    _proto: AdaptTProtocol,
    _buf: Array[Byte],
    _start_offset: Int) extends {{StructName}} {

{{#hasFields}}
  /**
   * In case any unexpected field is accessed, fallback to eager decoding.
   */
  private[this] lazy val delegate: {{StructName}} = {
    val bytes = _root_.java.util.Arrays.copyOfRange(_buf, _start_offset, _end_offset)
    val proto = _proto.withBytes(bytes)
    {{StructName}}.eagerDecode(proto)
  }
{{/hasFields}}

{{#fields}}
  private[this] var {{memberName}}: {{>optionalType}} = _
  def {{setName}}({{fieldName}}: {{>optionalType}}): Unit = {{memberName}} = {{fieldName}}
  // This will be removed by ASM if field is unused.
  def {{fieldName}}: {{>optionalType}} = {{memberName}}
  // This will be removed by ASM if field is used otherwise renamed to {{fieldName}}.
  def {{delegateName}}: {{>optionalType}} = delegate.{{fieldName}}

{{/fields}}

  private[this] var _end_offset: Int = _
  def set__endOffset(offset: Int): Unit = _end_offset = offset

  private[this] var __passthroughFields: immutable$Map[Short, TFieldBlob] = _root_.com.twitter.scrooge.internal.TProtocols.NoPassthroughFields
  def set__passthroughFields(passthroughFields: immutable$Map[Short, TFieldBlob]): Unit =
    __passthroughFields = passthroughFields

  override def _passthroughFields: immutable$Map[Short, TFieldBlob] = __passthroughFields

  /*
  Override the super hash code to make it a lazy val rather than def.

  Calculating the hash code can be expensive, caching it where possible
  can provide significant performance wins. (Key in a hash map for instance)
  Usually not safe since the normal constructor will accept a mutable map or
  set as an arg
  Here however we control how the class is generated from serialized data.
  With the class private and the contract that we throw away our mutable references
  having the hash code lazy here is safe.
  */
  override lazy val hashCode: Int = super.hashCode

  override def write(_oprot: TProtocol): Unit = {
    if (_oprot.isInstanceOf[AdaptTProtocol]) {
      _oprot.asInstanceOf[AdaptTProtocol].writeRaw(_buf, _start_offset, _end_offset - _start_offset)
    } else {
      super.write(_oprot)
    }
  }
}
{{/withTrait}}
{{/adapt}}
