/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class Work implements TBase<Work, Work._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Work");

  private static final TField NUM1_FIELD_DESC = new TField("num1", TType.I32, (short)1);
  private static final TField NUM2_FIELD_DESC = new TField("num2", TType.I32, (short)2);
  private static final TField COMMENT_FIELD_DESC = new TField("comment", TType.STRING, (short)3);
  private static final TField TEST_SET_FIELD_DESC = new TField("test_set", TType.SET, (short)4);
  private static final TField D1_FIELD_DESC = new TField("d1", TType.DOUBLE, (short)5);
  private static final TField TEST_MAP_FIELD_DESC = new TField("test_map", TType.MAP, (short)6);
  private static final TField TEST_BINARY_FIELD_DESC = new TField("test_binary", TType.STRING, (short)7);
  private static final TField REQ_INT_FIELD_DESC = new TField("req_int", TType.I64, (short)8);
  private static final TField DAY_FIELD_DESC = new TField("day", TType.I32, (short)9);
  private static final TField OTHER_FIELD_DESC = new TField("other", TType.STRUCT, (short)10);
  private static final TField TEST_LIST_FIELD_DESC = new TField("test_list", TType.LIST, (short)11);
  private static final TField USER_IDS_FIELD_DESC = new TField("user_ids", TType.LIST, (short)12);
  private static final TField OTHER_LIST_FIELD_DESC = new TField("other_list", TType.LIST, (short)13);

  public int num1;
  public int num2;
  public String comment;
  public Set<ByteBuffer> test_set;
  public double d1;
  public Map<String,String> test_map;
  public ByteBuffer test_binary;
  public long req_int;
  /**
   * 
   * @see Day
   */
  public Day day;
  public Other other;
  public List<String> test_list;
  public List<Long> user_ids;
  public List<Other> other_list;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    NUM1((short)1, "num1"),
    NUM2((short)2, "num2"),
    COMMENT((short)3, "comment"),
    TEST_SET((short)4, "test_set"),
    D1((short)5, "d1"),
    TEST_MAP((short)6, "test_map"),
    TEST_BINARY((short)7, "test_binary"),
    REQ_INT((short)8, "req_int"),
    /**
     * 
     * @see Day
     */
    DAY((short)9, "day"),
    OTHER((short)10, "other"),
    TEST_LIST((short)11, "test_list"),
    USER_IDS((short)12, "user_ids"),
    OTHER_LIST((short)13, "other_list");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM1
          return NUM1;
        case 2: // NUM2
          return NUM2;
        case 3: // COMMENT
          return COMMENT;
        case 4: // TEST_SET
          return TEST_SET;
        case 5: // D1
          return D1;
        case 6: // TEST_MAP
          return TEST_MAP;
        case 7: // TEST_BINARY
          return TEST_BINARY;
        case 8: // REQ_INT
          return REQ_INT;
        case 9: // DAY
          return DAY;
        case 10: // OTHER
          return OTHER;
        case 11: // TEST_LIST
          return TEST_LIST;
        case 12: // USER_IDS
          return USER_IDS;
        case 13: // OTHER_LIST
          return OTHER_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM1_ISSET_ID = 0;
  private static final int __NUM2_ISSET_ID = 1;
  private static final int __D1_ISSET_ID = 2;
  private static final int __REQ_INT_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM1, new FieldMetaData("num1", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.NUM2, new FieldMetaData("num2", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.COMMENT, new FieldMetaData("comment", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TEST_SET, new FieldMetaData("test_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.D1, new FieldMetaData("d1", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.TEST_MAP, new FieldMetaData("test_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.TEST_BINARY, new FieldMetaData("test_binary", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.REQ_INT, new FieldMetaData("req_int", TFieldRequirementType.REQUIRED, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.DAY, new FieldMetaData("day", TFieldRequirementType.REQUIRED, 
        new EnumMetaData(TType.ENUM, Day.class)));
    tmpMap.put(_Fields.OTHER, new FieldMetaData("other", TFieldRequirementType.REQUIRED, 
        new StructMetaData(TType.STRUCT, Other.class)));
    tmpMap.put(_Fields.TEST_LIST, new FieldMetaData("test_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.USER_IDS, new FieldMetaData("user_ids", TFieldRequirementType.REQUIRED, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I64))));
    tmpMap.put(_Fields.OTHER_LIST, new FieldMetaData("other_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Other.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Work.class, metaDataMap);
  }

  public Work() {
    this.num1 = 0;

    this.day = Day.Mon;

  }

  public Work(
    int num1,
    int num2,
    Set<ByteBuffer> test_set,
    double d1,
    Map<String,String> test_map,
    ByteBuffer test_binary,
    long req_int,
    Day day,
    Other other,
    List<String> test_list,
    List<Long> user_ids,
    List<Other> other_list)
  {
    this();
    this.num1 = num1;
    setNum1IsSet(true);
    this.num2 = num2;
    setNum2IsSet(true);
    this.test_set = test_set;
    this.d1 = d1;
    setD1IsSet(true);
    this.test_map = test_map;
    this.test_binary = test_binary;
    this.req_int = req_int;
    setReq_intIsSet(true);
    this.day = day;
    this.other = other;
    this.test_list = test_list;
    this.user_ids = user_ids;
    this.other_list = other_list;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Work(Work other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.num1 = other.num1;
    this.num2 = other.num2;
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    if (other.isSetTest_set()) {
      Set<ByteBuffer> __this__test_set = new HashSet<ByteBuffer>();
      for (ByteBuffer other_element : other.test_set) {
        ByteBuffer temp_binary_element = TBaseHelper.copyBinary(other_element);
;
        __this__test_set.add(temp_binary_element);
      }
      this.test_set = __this__test_set;
    }
    this.d1 = other.d1;
    if (other.isSetTest_map()) {
      Map<String,String> __this__test_map = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.test_map.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__test_map_copy_key = other_element_key;

        String __this__test_map_copy_value = other_element_value;

        __this__test_map.put(__this__test_map_copy_key, __this__test_map_copy_value);
      }
      this.test_map = __this__test_map;
    }
    if (other.isSetTest_binary()) {
      this.test_binary = TBaseHelper.copyBinary(other.test_binary);
;
    }
    this.req_int = other.req_int;
    if (other.isSetDay()) {
      this.day = other.day;
    }
    if (other.isSetOther()) {
      this.other = new Other(other.other);
    }
    if (other.isSetTest_list()) {
      List<String> __this__test_list = new ArrayList<String>();
      for (String other_element : other.test_list) {
        __this__test_list.add(other_element);
      }
      this.test_list = __this__test_list;
    }
    if (other.isSetUser_ids()) {
      List<Long> __this__user_ids = new ArrayList<Long>();
      for (Long other_element : other.user_ids) {
        __this__user_ids.add(other_element);
      }
      this.user_ids = __this__user_ids;
    }
    if (other.isSetOther_list()) {
      List<Other> __this__other_list = new ArrayList<Other>();
      for (Other other_element : other.other_list) {
        __this__other_list.add(new Other(other_element));
      }
      this.other_list = __this__other_list;
    }
  }

  public Work deepCopy() {
    return new Work(this);
  }

  @java.lang.Override
  public void clear() {
    this.num1 = 0;

    setNum2IsSet(false);
    this.num2 = 0;
    this.comment = null;
    this.test_set = null;
    setD1IsSet(false);
    this.d1 = 0.0;
    this.test_map = null;
    this.test_binary = null;
    setReq_intIsSet(false);
    this.req_int = 0;
    this.day = Day.Mon;

    this.other = null;
    this.test_list = null;
    this.user_ids = null;
    this.other_list = null;
  }

  public int getNum1() {
    return this.num1;
  }

  public Work setNum1(int num1) {
    this.num1 = num1;
    setNum1IsSet(true);
    return this;
  }

  public void unsetNum1() {
    __isset_bit_vector.clear(__NUM1_ISSET_ID);
  }

  /** Returns true if field num1 is set (has been asigned a value) and false otherwise */
  public boolean isSetNum1() {
    return __isset_bit_vector.get(__NUM1_ISSET_ID);
  }

  public void setNum1IsSet(boolean value) {
    __isset_bit_vector.set(__NUM1_ISSET_ID, value);
  }

  public int getNum2() {
    return this.num2;
  }

  public Work setNum2(int num2) {
    this.num2 = num2;
    setNum2IsSet(true);
    return this;
  }

  public void unsetNum2() {
    __isset_bit_vector.clear(__NUM2_ISSET_ID);
  }

  /** Returns true if field num2 is set (has been asigned a value) and false otherwise */
  public boolean isSetNum2() {
    return __isset_bit_vector.get(__NUM2_ISSET_ID);
  }

  public void setNum2IsSet(boolean value) {
    __isset_bit_vector.set(__NUM2_ISSET_ID, value);
  }

  public String getComment() {
    return this.comment;
  }

  public Work setComment(String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been asigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public int getTest_setSize() {
    return (this.test_set == null) ? 0 : this.test_set.size();
  }

  public java.util.Iterator<ByteBuffer> getTest_setIterator() {
    return (this.test_set == null) ? null : this.test_set.iterator();
  }

  public void addToTest_set(ByteBuffer elem) {
    if (this.test_set == null) {
      this.test_set = new HashSet<ByteBuffer>();
    }
    this.test_set.add(elem);
  }

  public Set<ByteBuffer> getTest_set() {
    return this.test_set;
  }

  public Work setTest_set(Set<ByteBuffer> test_set) {
    this.test_set = test_set;
    return this;
  }

  public void unsetTest_set() {
    this.test_set = null;
  }

  /** Returns true if field test_set is set (has been asigned a value) and false otherwise */
  public boolean isSetTest_set() {
    return this.test_set != null;
  }

  public void setTest_setIsSet(boolean value) {
    if (!value) {
      this.test_set = null;
    }
  }

  public double getD1() {
    return this.d1;
  }

  public Work setD1(double d1) {
    this.d1 = d1;
    setD1IsSet(true);
    return this;
  }

  public void unsetD1() {
    __isset_bit_vector.clear(__D1_ISSET_ID);
  }

  /** Returns true if field d1 is set (has been asigned a value) and false otherwise */
  public boolean isSetD1() {
    return __isset_bit_vector.get(__D1_ISSET_ID);
  }

  public void setD1IsSet(boolean value) {
    __isset_bit_vector.set(__D1_ISSET_ID, value);
  }

  public int getTest_mapSize() {
    return (this.test_map == null) ? 0 : this.test_map.size();
  }

  public void putToTest_map(String key, String val) {
    if (this.test_map == null) {
      this.test_map = new HashMap<String,String>();
    }
    this.test_map.put(key, val);
  }

  public Map<String,String> getTest_map() {
    return this.test_map;
  }

  public Work setTest_map(Map<String,String> test_map) {
    this.test_map = test_map;
    return this;
  }

  public void unsetTest_map() {
    this.test_map = null;
  }

  /** Returns true if field test_map is set (has been asigned a value) and false otherwise */
  public boolean isSetTest_map() {
    return this.test_map != null;
  }

  public void setTest_mapIsSet(boolean value) {
    if (!value) {
      this.test_map = null;
    }
  }

  public byte[] getTest_binary() {
    setTest_binary(TBaseHelper.rightSize(test_binary));
    return test_binary.array();
  }

  public ByteBuffer BufferForTest_binary() {
    return test_binary;
  }

  public Work setTest_binary(byte[] test_binary) {
    setTest_binary(ByteBuffer.wrap(test_binary));
    return this;
  }

  public Work setTest_binary(ByteBuffer test_binary) {
    this.test_binary = test_binary;
    return this;
  }

  public void unsetTest_binary() {
    this.test_binary = null;
  }

  /** Returns true if field test_binary is set (has been asigned a value) and false otherwise */
  public boolean isSetTest_binary() {
    return this.test_binary != null;
  }

  public void setTest_binaryIsSet(boolean value) {
    if (!value) {
      this.test_binary = null;
    }
  }

  public long getReq_int() {
    return this.req_int;
  }

  public Work setReq_int(long req_int) {
    this.req_int = req_int;
    setReq_intIsSet(true);
    return this;
  }

  public void unsetReq_int() {
    __isset_bit_vector.clear(__REQ_INT_ISSET_ID);
  }

  /** Returns true if field req_int is set (has been asigned a value) and false otherwise */
  public boolean isSetReq_int() {
    return __isset_bit_vector.get(__REQ_INT_ISSET_ID);
  }

  public void setReq_intIsSet(boolean value) {
    __isset_bit_vector.set(__REQ_INT_ISSET_ID, value);
  }

  /**
   * 
   * @see Day
   */
  public Day getDay() {
    return this.day;
  }

  /**
   * 
   * @see Day
   */
  public Work setDay(Day day) {
    this.day = day;
    return this;
  }

  public void unsetDay() {
    this.day = null;
  }

  /** Returns true if field day is set (has been asigned a value) and false otherwise */
  public boolean isSetDay() {
    return this.day != null;
  }

  public void setDayIsSet(boolean value) {
    if (!value) {
      this.day = null;
    }
  }

  public Other getOther() {
    return this.other;
  }

  public Work setOther(Other other) {
    this.other = other;
    return this;
  }

  public void unsetOther() {
    this.other = null;
  }

  /** Returns true if field other is set (has been asigned a value) and false otherwise */
  public boolean isSetOther() {
    return this.other != null;
  }

  public void setOtherIsSet(boolean value) {
    if (!value) {
      this.other = null;
    }
  }

  public int getTest_listSize() {
    return (this.test_list == null) ? 0 : this.test_list.size();
  }

  public java.util.Iterator<String> getTest_listIterator() {
    return (this.test_list == null) ? null : this.test_list.iterator();
  }

  public void addToTest_list(String elem) {
    if (this.test_list == null) {
      this.test_list = new ArrayList<String>();
    }
    this.test_list.add(elem);
  }

  public List<String> getTest_list() {
    return this.test_list;
  }

  public Work setTest_list(List<String> test_list) {
    this.test_list = test_list;
    return this;
  }

  public void unsetTest_list() {
    this.test_list = null;
  }

  /** Returns true if field test_list is set (has been asigned a value) and false otherwise */
  public boolean isSetTest_list() {
    return this.test_list != null;
  }

  public void setTest_listIsSet(boolean value) {
    if (!value) {
      this.test_list = null;
    }
  }

  public int getUser_idsSize() {
    return (this.user_ids == null) ? 0 : this.user_ids.size();
  }

  public java.util.Iterator<Long> getUser_idsIterator() {
    return (this.user_ids == null) ? null : this.user_ids.iterator();
  }

  public void addToUser_ids(long elem) {
    if (this.user_ids == null) {
      this.user_ids = new ArrayList<Long>();
    }
    this.user_ids.add(elem);
  }

  public List<Long> getUser_ids() {
    return this.user_ids;
  }

  public Work setUser_ids(List<Long> user_ids) {
    this.user_ids = user_ids;
    return this;
  }

  public void unsetUser_ids() {
    this.user_ids = null;
  }

  /** Returns true if field user_ids is set (has been asigned a value) and false otherwise */
  public boolean isSetUser_ids() {
    return this.user_ids != null;
  }

  public void setUser_idsIsSet(boolean value) {
    if (!value) {
      this.user_ids = null;
    }
  }

  public int getOther_listSize() {
    return (this.other_list == null) ? 0 : this.other_list.size();
  }

  public java.util.Iterator<Other> getOther_listIterator() {
    return (this.other_list == null) ? null : this.other_list.iterator();
  }

  public void addToOther_list(Other elem) {
    if (this.other_list == null) {
      this.other_list = new ArrayList<Other>();
    }
    this.other_list.add(elem);
  }

  public List<Other> getOther_list() {
    return this.other_list;
  }

  public Work setOther_list(List<Other> other_list) {
    this.other_list = other_list;
    return this;
  }

  public void unsetOther_list() {
    this.other_list = null;
  }

  /** Returns true if field other_list is set (has been asigned a value) and false otherwise */
  public boolean isSetOther_list() {
    return this.other_list != null;
  }

  public void setOther_listIsSet(boolean value) {
    if (!value) {
      this.other_list = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM1:
      if (value == null) {
        unsetNum1();
      } else {
        setNum1((Integer)value);
      }
      break;

    case NUM2:
      if (value == null) {
        unsetNum2();
      } else {
        setNum2((Integer)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    case TEST_SET:
      if (value == null) {
        unsetTest_set();
      } else {
        setTest_set((Set<ByteBuffer>)value);
      }
      break;

    case D1:
      if (value == null) {
        unsetD1();
      } else {
        setD1((Double)value);
      }
      break;

    case TEST_MAP:
      if (value == null) {
        unsetTest_map();
      } else {
        setTest_map((Map<String,String>)value);
      }
      break;

    case TEST_BINARY:
      if (value == null) {
        unsetTest_binary();
      } else {
        setTest_binary((ByteBuffer)value);
      }
      break;

    case REQ_INT:
      if (value == null) {
        unsetReq_int();
      } else {
        setReq_int((Long)value);
      }
      break;

    case DAY:
      if (value == null) {
        unsetDay();
      } else {
        setDay((Day)value);
      }
      break;

    case OTHER:
      if (value == null) {
        unsetOther();
      } else {
        setOther((Other)value);
      }
      break;

    case TEST_LIST:
      if (value == null) {
        unsetTest_list();
      } else {
        setTest_list((List<String>)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUser_ids();
      } else {
        setUser_ids((List<Long>)value);
      }
      break;

    case OTHER_LIST:
      if (value == null) {
        unsetOther_list();
      } else {
        setOther_list((List<Other>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM1:
      return new Integer(getNum1());

    case NUM2:
      return new Integer(getNum2());

    case COMMENT:
      return getComment();

    case TEST_SET:
      return getTest_set();

    case D1:
      return new Double(getD1());

    case TEST_MAP:
      return getTest_map();

    case TEST_BINARY:
      return getTest_binary();

    case REQ_INT:
      return new Long(getReq_int());

    case DAY:
      return getDay();

    case OTHER:
      return getOther();

    case TEST_LIST:
      return getTest_list();

    case USER_IDS:
      return getUser_ids();

    case OTHER_LIST:
      return getOther_list();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM1:
      return isSetNum1();
    case NUM2:
      return isSetNum2();
    case COMMENT:
      return isSetComment();
    case TEST_SET:
      return isSetTest_set();
    case D1:
      return isSetD1();
    case TEST_MAP:
      return isSetTest_map();
    case TEST_BINARY:
      return isSetTest_binary();
    case REQ_INT:
      return isSetReq_int();
    case DAY:
      return isSetDay();
    case OTHER:
      return isSetOther();
    case TEST_LIST:
      return isSetTest_list();
    case USER_IDS:
      return isSetUser_ids();
    case OTHER_LIST:
      return isSetOther_list();
    }
    throw new IllegalStateException();
  }

  @java.lang.Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Work)
      return this.equals((Work)that);
    return false;
  }

  public boolean equals(Work that) {
    if (that == null)
      return false;

    boolean this_present_num1 = true;
    boolean that_present_num1 = true;
    if (this_present_num1 || that_present_num1) {
      if (!(this_present_num1 && that_present_num1))
        return false;
      if (this.num1 != that.num1)
        return false;
    }

    boolean this_present_num2 = true;
    boolean that_present_num2 = true;
    if (this_present_num2 || that_present_num2) {
      if (!(this_present_num2 && that_present_num2))
        return false;
      if (this.num2 != that.num2)
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    boolean this_present_test_set = true && this.isSetTest_set();
    boolean that_present_test_set = true && that.isSetTest_set();
    if (this_present_test_set || that_present_test_set) {
      if (!(this_present_test_set && that_present_test_set))
        return false;
      if (!this.test_set.equals(that.test_set))
        return false;
    }

    boolean this_present_d1 = true;
    boolean that_present_d1 = true;
    if (this_present_d1 || that_present_d1) {
      if (!(this_present_d1 && that_present_d1))
        return false;
      if (this.d1 != that.d1)
        return false;
    }

    boolean this_present_test_map = true && this.isSetTest_map();
    boolean that_present_test_map = true && that.isSetTest_map();
    if (this_present_test_map || that_present_test_map) {
      if (!(this_present_test_map && that_present_test_map))
        return false;
      if (!this.test_map.equals(that.test_map))
        return false;
    }

    boolean this_present_test_binary = true && this.isSetTest_binary();
    boolean that_present_test_binary = true && that.isSetTest_binary();
    if (this_present_test_binary || that_present_test_binary) {
      if (!(this_present_test_binary && that_present_test_binary))
        return false;
      if (!this.test_binary.equals(that.test_binary))
        return false;
    }

    boolean this_present_req_int = true;
    boolean that_present_req_int = true;
    if (this_present_req_int || that_present_req_int) {
      if (!(this_present_req_int && that_present_req_int))
        return false;
      if (this.req_int != that.req_int)
        return false;
    }

    boolean this_present_day = true && this.isSetDay();
    boolean that_present_day = true && that.isSetDay();
    if (this_present_day || that_present_day) {
      if (!(this_present_day && that_present_day))
        return false;
      if (!this.day.equals(that.day))
        return false;
    }

    boolean this_present_other = true && this.isSetOther();
    boolean that_present_other = true && that.isSetOther();
    if (this_present_other || that_present_other) {
      if (!(this_present_other && that_present_other))
        return false;
      if (!this.other.equals(that.other))
        return false;
    }

    boolean this_present_test_list = true && this.isSetTest_list();
    boolean that_present_test_list = true && that.isSetTest_list();
    if (this_present_test_list || that_present_test_list) {
      if (!(this_present_test_list && that_present_test_list))
        return false;
      if (!this.test_list.equals(that.test_list))
        return false;
    }

    boolean this_present_user_ids = true && this.isSetUser_ids();
    boolean that_present_user_ids = true && that.isSetUser_ids();
    if (this_present_user_ids || that_present_user_ids) {
      if (!(this_present_user_ids && that_present_user_ids))
        return false;
      if (!this.user_ids.equals(that.user_ids))
        return false;
    }

    boolean this_present_other_list = true && this.isSetOther_list();
    boolean that_present_other_list = true && that.isSetOther_list();
    if (this_present_other_list || that_present_other_list) {
      if (!(this_present_other_list && that_present_other_list))
        return false;
      if (!this.other_list.equals(that.other_list))
        return false;
    }

    return true;
  }

  @java.lang.Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Work other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Work typedOther = (Work)other;

    lastComparison = Boolean.valueOf(isSetNum1()).compareTo(typedOther.isSetNum1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum1()) {
      lastComparison = TBaseHelper.compareTo(this.num1, typedOther.num1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum2()).compareTo(typedOther.isSetNum2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum2()) {
      lastComparison = TBaseHelper.compareTo(this.num2, typedOther.num2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(typedOther.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = TBaseHelper.compareTo(this.comment, typedOther.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTest_set()).compareTo(typedOther.isSetTest_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTest_set()) {
      lastComparison = TBaseHelper.compareTo(this.test_set, typedOther.test_set);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD1()).compareTo(typedOther.isSetD1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD1()) {
      lastComparison = TBaseHelper.compareTo(this.d1, typedOther.d1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTest_map()).compareTo(typedOther.isSetTest_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTest_map()) {
      lastComparison = TBaseHelper.compareTo(this.test_map, typedOther.test_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTest_binary()).compareTo(typedOther.isSetTest_binary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTest_binary()) {
      lastComparison = TBaseHelper.compareTo(this.test_binary, typedOther.test_binary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReq_int()).compareTo(typedOther.isSetReq_int());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReq_int()) {
      lastComparison = TBaseHelper.compareTo(this.req_int, typedOther.req_int);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDay()).compareTo(typedOther.isSetDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDay()) {
      lastComparison = TBaseHelper.compareTo(this.day, typedOther.day);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOther()).compareTo(typedOther.isSetOther());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOther()) {
      lastComparison = TBaseHelper.compareTo(this.other, typedOther.other);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTest_list()).compareTo(typedOther.isSetTest_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTest_list()) {
      lastComparison = TBaseHelper.compareTo(this.test_list, typedOther.test_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_ids()).compareTo(typedOther.isSetUser_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_ids()) {
      lastComparison = TBaseHelper.compareTo(this.user_ids, typedOther.user_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOther_list()).compareTo(typedOther.isSetOther_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOther_list()) {
      lastComparison = TBaseHelper.compareTo(this.other_list, typedOther.other_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NUM1
          if (field.type == TType.I32) {
            this.num1 = iprot.readI32();
            setNum1IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NUM2
          if (field.type == TType.I32) {
            this.num2 = iprot.readI32();
            setNum2IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // COMMENT
          if (field.type == TType.STRING) {
            this.comment = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TEST_SET
          if (field.type == TType.SET) {
            {
              TSet _set0 = iprot.readSetBegin();
              this.test_set = new HashSet<ByteBuffer>(2*_set0.size);
              for (int _i1 = 0; _i1 < _set0.size; ++_i1)
              {
                ByteBuffer _elem2;
                _elem2 = iprot.readBinary();
                this.test_set.add(_elem2);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // D1
          if (field.type == TType.DOUBLE) {
            this.d1 = iprot.readDouble();
            setD1IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // TEST_MAP
          if (field.type == TType.MAP) {
            {
              TMap _map3 = iprot.readMapBegin();
              this.test_map = new HashMap<String,String>(2*_map3.size);
              for (int _i4 = 0; _i4 < _map3.size; ++_i4)
              {
                String _key5;
                String _val6;
                _key5 = iprot.readString();
                _val6 = iprot.readString();
                this.test_map.put(_key5, _val6);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // TEST_BINARY
          if (field.type == TType.STRING) {
            this.test_binary = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // REQ_INT
          if (field.type == TType.I64) {
            this.req_int = iprot.readI64();
            setReq_intIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // DAY
          if (field.type == TType.I32 || field.type == TType.ENUM) {
            this.day = Day.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // OTHER
          if (field.type == TType.STRUCT) {
            this.other = new Other();
            this.other.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // TEST_LIST
          if (field.type == TType.LIST) {
            {
              TList _list7 = iprot.readListBegin();
              this.test_list = new ArrayList<String>(_list7.size);
              for (int _i8 = 0; _i8 < _list7.size; ++_i8)
              {
                String _elem9;
                _elem9 = iprot.readString();
                this.test_list.add(_elem9);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // USER_IDS
          if (field.type == TType.LIST) {
            {
              TList _list10 = iprot.readListBegin();
              this.user_ids = new ArrayList<Long>(_list10.size);
              for (int _i11 = 0; _i11 < _list10.size; ++_i11)
              {
                long _elem12;
                _elem12 = iprot.readI64();
                this.user_ids.add(_elem12);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // OTHER_LIST
          if (field.type == TType.LIST) {
            {
              TList _list13 = iprot.readListBegin();
              this.other_list = new ArrayList<Other>(_list13.size);
              for (int _i14 = 0; _i14 < _list13.size; ++_i14)
              {
                Other _elem15;
                _elem15 = new Other();
                _elem15.read(iprot);
                this.other_list.add(_elem15);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetReq_int()) {
      throw new TProtocolException("Required field 'req_int' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(NUM1_FIELD_DESC);
    oprot.writeI32(this.num1);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUM2_FIELD_DESC);
    oprot.writeI32(this.num2);
    oprot.writeFieldEnd();
    if (this.comment != null) {
      if (isSetComment()) {
        oprot.writeFieldBegin(COMMENT_FIELD_DESC);
        oprot.writeString(this.comment);
        oprot.writeFieldEnd();
      }
    }
    if (this.test_set != null) {
      oprot.writeFieldBegin(TEST_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRING, this.test_set.size()));
        for (ByteBuffer _iter16 : this.test_set)
        {
          oprot.writeBinary(_iter16);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(D1_FIELD_DESC);
    oprot.writeDouble(this.d1);
    oprot.writeFieldEnd();
    if (this.test_map != null) {
      oprot.writeFieldBegin(TEST_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.test_map.size()));
        for (Map.Entry<String, String> _iter17 : this.test_map.entrySet())
        {
          oprot.writeString(_iter17.getKey());
          oprot.writeString(_iter17.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.test_binary != null) {
      oprot.writeFieldBegin(TEST_BINARY_FIELD_DESC);
      oprot.writeBinary(this.test_binary);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(REQ_INT_FIELD_DESC);
    oprot.writeI64(this.req_int);
    oprot.writeFieldEnd();
    if (this.day != null) {
      oprot.writeFieldBegin(DAY_FIELD_DESC);
      oprot.writeI32(this.day.getValue());
      oprot.writeFieldEnd();
    }
    if (this.other != null) {
      oprot.writeFieldBegin(OTHER_FIELD_DESC);
      this.other.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.test_list != null) {
      oprot.writeFieldBegin(TEST_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.test_list.size()));
        for (String _iter18 : this.test_list)
        {
          oprot.writeString(_iter18);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.user_ids != null) {
      oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I64, this.user_ids.size()));
        for (long _iter19 : this.user_ids)
        {
          oprot.writeI64(_iter19);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.other_list != null) {
      oprot.writeFieldBegin(OTHER_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.other_list.size()));
        for (Other _iter20 : this.other_list)
        {
          _iter20.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @java.lang.Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Work(");
    boolean first = true;

    sb.append("num1:");
    sb.append(this.num1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num2:");
    sb.append(this.num2);
    first = false;
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("test_set:");
    if (this.test_set == null) {
      sb.append("null");
    } else {
      sb.append(this.test_set);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("d1:");
    sb.append(this.d1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("test_map:");
    if (this.test_map == null) {
      sb.append("null");
    } else {
      sb.append(this.test_map);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("test_binary:");
    if (this.test_binary == null) {
      sb.append("null");
    } else {
      TBaseHelper.toString(this.test_binary, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("req_int:");
    sb.append(this.req_int);
    first = false;
    if (!first) sb.append(", ");
    sb.append("day:");
    if (this.day == null) {
      sb.append("null");
    } else {
      sb.append(this.day);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("other:");
    if (this.other == null) {
      sb.append("null");
    } else {
      sb.append(this.other);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("test_list:");
    if (this.test_list == null) {
      sb.append("null");
    } else {
      sb.append(this.test_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user_ids:");
    if (this.user_ids == null) {
      sb.append("null");
    } else {
      sb.append(this.user_ids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("other_list:");
    if (this.other_list == null) {
      sb.append("null");
    } else {
      sb.append(this.other_list);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // alas, we cannot check 'req_int' because it's a primitive and you chose the non-beans generator.
    if (day == null) {
      throw new TProtocolException("Required field 'day' was not present! Struct: " + toString());
    }
    if (other == null) {
      throw new TProtocolException("Required field 'other' was not present! Struct: " + toString());
    }
    if (user_ids == null) {
      throw new TProtocolException("Required field 'user_ids' was not present! Struct: " + toString());
    }
  }

}

