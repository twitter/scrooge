/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
package com.twitter.scrooge.test.gold.thriftscala

import com.twitter.scrooge.{
  HasThriftStructCodec3,
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object Request extends ThriftStructCodec3[Request] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("Request")
  val AListField = new TField("aList", TType.LIST, 1)
  val AListFieldManifest = implicitly[Manifest[Seq[String]]]
  val ASetField = new TField("aSet", TType.SET, 2)
  val ASetFieldManifest = implicitly[Manifest[Set[Int]]]
  val AMapField = new TField("aMap", TType.MAP, 3)
  val AMapFieldManifest = implicitly[Manifest[Map[Long, Long]]]
  val ARequestField = new TField("aRequest", TType.STRUCT, 4)
  val ARequestFieldManifest = implicitly[Manifest[com.twitter.scrooge.test.gold.thriftscala.Request]]
  val SubRequestsField = new TField("subRequests", TType.LIST, 5)
  val SubRequestsFieldManifest = implicitly[Manifest[Seq[com.twitter.scrooge.test.gold.thriftscala.Request]]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      AListField,
      false,
      false,
      AListFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[String]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      Some[Seq[String]](Seq[String]())
    ),
    new ThriftStructFieldInfo(
      ASetField,
      false,
      false,
      ASetFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[Int]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      Some[Set[Int]](Set[Int]())
    ),
    new ThriftStructFieldInfo(
      AMapField,
      false,
      false,
      AMapFieldManifest,
      _root_.scala.Some(implicitly[Manifest[Long]]),
      _root_.scala.Some(implicitly[Manifest[Long]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      Some[Map[Long, Long]](Map[Long, Long]())
    ),
    new ThriftStructFieldInfo(
      ARequestField,
      true,
      false,
      ARequestFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      SubRequestsField,
      false,
      false,
      SubRequestsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[com.twitter.scrooge.test.gold.thriftscala.Request]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      Some[Seq[com.twitter.scrooge.test.gold.thriftscala.Request]](Seq[com.twitter.scrooge.test.gold.thriftscala.Request]())
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Request): Unit = {
  }

  def withoutPassthroughFields(original: Request): Request =
    new Immutable(
      aList =
        {
          val field = original.aList
          field.map { field =>
            field
          }
        },
      aSet =
        {
          val field = original.aSet
          field.map { field =>
            field
          }
        },
      aMap =
        {
          val field = original.aMap
          field.map { case (key, value) =>
              val newKey = {
              val field = key
              field
            }


              val newValue = {
              val field = value
              field
            }


            newKey -> newValue
          }
        },
      aRequest =
        {
          val field = original.aRequest
          field.map { field =>
            com.twitter.scrooge.test.gold.thriftscala.Request.withoutPassthroughFields(field)
          }
        },
      subRequests =
        {
          val field = original.subRequests
          field.map { field =>
            com.twitter.scrooge.test.gold.thriftscala.Request.withoutPassthroughFields(field)
          }
        }
    )

  override def encode(_item: Request, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

  private[this] def lazyDecode(_iprot: LazyTProtocol): Request = {

    var aList: Seq[String] = Seq[String]()
    var aSet: Set[Int] = Set[Int]()
    var aMap: Map[Long, Long] = Map[Long, Long]()
    var aRequest: Option[com.twitter.scrooge.test.gold.thriftscala.Request] = None
    var subRequests: Seq[com.twitter.scrooge.test.gold.thriftscala.Request] = Seq[com.twitter.scrooge.test.gold.thriftscala.Request]()

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.LIST =>

                aList = readAListValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'aList' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.SET =>

                aSet = readASetValue(_iprot)
              case _actualType =>
                val _expectedType = TType.SET
                throw new TProtocolException(
                  "Received wrong type for field 'aSet' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.MAP =>

                aMap = readAMapValue(_iprot)
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'aMap' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRUCT =>

                aRequest = Some(readARequestValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'aRequest' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.LIST =>

                subRequests = readSubRequestsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'subRequests' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      aList,
      aSet,
      aMap,
      aRequest,
      subRequests,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): Request =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[this] def eagerDecode(_iprot: TProtocol): Request = {
    var aList: Seq[String] = Seq[String]()
    var aSet: Set[Int] = Set[Int]()
    var aMap: Map[Long, Long] = Map[Long, Long]()
    var aRequest: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.Request] = _root_.scala.None
    var subRequests: Seq[com.twitter.scrooge.test.gold.thriftscala.Request] = Seq[com.twitter.scrooge.test.gold.thriftscala.Request]()
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.LIST =>
                aList = readAListValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'aList' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.SET =>
                aSet = readASetValue(_iprot)
              case _actualType =>
                val _expectedType = TType.SET
                throw new TProtocolException(
                  "Received wrong type for field 'aSet' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.MAP =>
                aMap = readAMapValue(_iprot)
              case _actualType =>
                val _expectedType = TType.MAP
                throw new TProtocolException(
                  "Received wrong type for field 'aMap' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRUCT =>
                aRequest = _root_.scala.Some(readARequestValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'aRequest' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.LIST =>
                subRequests = readSubRequestsValue(_iprot)
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'subRequests' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      aList,
      aSet,
      aMap,
      aRequest,
      subRequests,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    aList: Seq[String] = Seq[String](),
    aSet: Set[Int] = Set[Int](),
    aMap: Map[Long, Long] = Map[Long, Long](),
    aRequest: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.Request] = _root_.scala.None,
    subRequests: Seq[com.twitter.scrooge.test.gold.thriftscala.Request] = Seq[com.twitter.scrooge.test.gold.thriftscala.Request]()
  ): Request =
    new Immutable(
      aList,
      aSet,
      aMap,
      aRequest,
      subRequests
    )

  def unapply(_item: Request): _root_.scala.Option[scala.Product5[Seq[String], Set[Int], Map[Long, Long], Option[com.twitter.scrooge.test.gold.thriftscala.Request], Seq[com.twitter.scrooge.test.gold.thriftscala.Request]]] = _root_.scala.Some(_item)


  @inline private def readAListValue(_iprot: TProtocol): Seq[String] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[String](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          _iprot.readString()
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeAListField(aList_item: Seq[String], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(AListField)
    writeAListValue(aList_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeAListValue(aList_item: Seq[String], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRING, aList_item.size))
    aList_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = aList_item.size
        while (_i < _size) {
          val aList_item_element = aList_item(_i)
          _oprot.writeString(aList_item_element)
          _i += 1
        }
      case _ =>
        aList_item.foreach { aList_item_element =>
          _oprot.writeString(aList_item_element)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private def readASetValue(_iprot: TProtocol): Set[Int] = {
    val _set = _iprot.readSetBegin()
    if (_set.size == 0) {
      _iprot.readSetEnd()
      Set.empty[Int]
    } else {
      val _rv = new mutable$HashSet[Int]
      var _i = 0
      while (_i < _set.size) {
        _rv += {
          _iprot.readI32()
        }
        _i += 1
      }
      _iprot.readSetEnd()
      _rv
    }
  }

  @inline private def writeASetField(aSet_item: Set[Int], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ASetField)
    writeASetValue(aSet_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeASetValue(aSet_item: Set[Int], _oprot: TProtocol): Unit = {
    _oprot.writeSetBegin(new TSet(TType.I32, aSet_item.size))
    aSet_item.foreach { aSet_item_element =>
      _oprot.writeI32(aSet_item_element)
    }
    _oprot.writeSetEnd()
  }

  @inline private def readAMapValue(_iprot: TProtocol): Map[Long, Long] = {
    val _map = _iprot.readMapBegin()
    if (_map.size == 0) {
      _iprot.readMapEnd()
      Map.empty[Long, Long]
    } else {
      val _rv = new mutable$HashMap[Long, Long]
      var _i = 0
      while (_i < _map.size) {
        val _key = {
          _iprot.readI64()
        }
        val _value = {
          _iprot.readI64()
        }
        _rv(_key) = _value
        _i += 1
      }
      _iprot.readMapEnd()
      _rv
    }
  }

  @inline private def writeAMapField(aMap_item: Map[Long, Long], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(AMapField)
    writeAMapValue(aMap_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeAMapValue(aMap_item: Map[Long, Long], _oprot: TProtocol): Unit = {
    _oprot.writeMapBegin(new TMap(TType.I64, TType.I64, aMap_item.size))
    aMap_item.foreach { case (aMap_item_key, aMap_item_value) =>
      _oprot.writeI64(aMap_item_key)
      _oprot.writeI64(aMap_item_value)
    }
    _oprot.writeMapEnd()
  }

  @inline private def readARequestValue(_iprot: TProtocol): com.twitter.scrooge.test.gold.thriftscala.Request = {
    com.twitter.scrooge.test.gold.thriftscala.Request.decode(_iprot)
  }

  @inline private def writeARequestField(aRequest_item: com.twitter.scrooge.test.gold.thriftscala.Request, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ARequestField)
    writeARequestValue(aRequest_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeARequestValue(aRequest_item: com.twitter.scrooge.test.gold.thriftscala.Request, _oprot: TProtocol): Unit = {
    aRequest_item.write(_oprot)
  }

  @inline private def readSubRequestsValue(_iprot: TProtocol): Seq[com.twitter.scrooge.test.gold.thriftscala.Request] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[com.twitter.scrooge.test.gold.thriftscala.Request](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          com.twitter.scrooge.test.gold.thriftscala.Request.decode(_iprot)
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeSubRequestsField(subRequests_item: Seq[com.twitter.scrooge.test.gold.thriftscala.Request], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SubRequestsField)
    writeSubRequestsValue(subRequests_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSubRequestsValue(subRequests_item: Seq[com.twitter.scrooge.test.gold.thriftscala.Request], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.STRUCT, subRequests_item.size))
    subRequests_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = subRequests_item.size
        while (_i < _size) {
          val subRequests_item_element = subRequests_item(_i)
          subRequests_item_element.write(_oprot)
          _i += 1
        }
      case _ =>
        subRequests_item.foreach { subRequests_item_element =>
          subRequests_item_element.write(_oprot)
        }
    }
    _oprot.writeListEnd()
  }


  object Immutable extends ThriftStructCodec3[Request] {
    override def encode(_item: Request, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): Request = Request.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[Request] = Request.metaData
  }

  /**
   * The default read-only implementation of Request.  You typically should not need to
   * directly reference this class; instead, use the Request.apply method to construct
   * new instances.
   */
  class Immutable(
      val aList: Seq[String],
      val aSet: Set[Int],
      val aMap: Map[Long, Long],
      val aRequest: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.Request],
      val subRequests: Seq[com.twitter.scrooge.test.gold.thriftscala.Request],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends Request {
    def this(
      aList: Seq[String] = Seq[String](),
      aSet: Set[Int] = Set[Int](),
      aMap: Map[Long, Long] = Map[Long, Long](),
      aRequest: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.Request] = _root_.scala.None,
      subRequests: Seq[com.twitter.scrooge.test.gold.thriftscala.Request] = Seq[com.twitter.scrooge.test.gold.thriftscala.Request]()
    ) = this(
      aList,
      aSet,
      aMap,
      aRequest,
      subRequests,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val aList: Seq[String],
      val aSet: Set[Int],
      val aMap: Map[Long, Long],
      val aRequest: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.Request],
      val subRequests: Seq[com.twitter.scrooge.test.gold.thriftscala.Request],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends Request {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }


    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the Request trait with additional state or
   * behavior and implement the read-only methods from Request using an underlying
   * instance.
   */
  trait Proxy extends Request {
    protected def _underlying_Request: Request
    override def aList: Seq[String] = _underlying_Request.aList
    override def aSet: Set[Int] = _underlying_Request.aSet
    override def aMap: Map[Long, Long] = _underlying_Request.aMap
    override def aRequest: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.Request] = _underlying_Request.aRequest
    override def subRequests: Seq[com.twitter.scrooge.test.gold.thriftscala.Request] = _underlying_Request.subRequests
    override def _passthroughFields = _underlying_Request._passthroughFields
  }
}

trait Request
  extends ThriftStruct
  with scala.Product5[Seq[String], Set[Int], Map[Long, Long], Option[com.twitter.scrooge.test.gold.thriftscala.Request], Seq[com.twitter.scrooge.test.gold.thriftscala.Request]]
  with HasThriftStructCodec3[Request]
  with java.io.Serializable
{
  import Request._

  def aList: Seq[String]
  def aSet: Set[Int]
  def aMap: Map[Long, Long]
  def aRequest: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.Request]
  def subRequests: Seq[com.twitter.scrooge.test.gold.thriftscala.Request]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = aList
  def _2 = aSet
  def _3 = aMap
  def _4 = aRequest
  def _5 = subRequests


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (aList ne null) {
                writeAListValue(aList, _oprot)
                _root_.scala.Some(Request.AListField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (aSet ne null) {
                writeASetValue(aSet, _oprot)
                _root_.scala.Some(Request.ASetField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (aMap ne null) {
                writeAMapValue(aMap, _oprot)
                _root_.scala.Some(Request.AMapField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (aRequest.isDefined) {
                writeARequestValue(aRequest.get, _oprot)
                _root_.scala.Some(Request.ARequestField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (subRequests ne null) {
                writeSubRequestsValue(subRequests, _oprot)
                _root_.scala.Some(Request.SubRequestsField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
            _root_.scala.Some(TFieldBlob(_field, _data))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): Request = {
    var aList: Seq[String] = this.aList
    var aSet: Set[Int] = this.aSet
    var aMap: Map[Long, Long] = this.aMap
    var aRequest: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.Request] = this.aRequest
    var subRequests: Seq[com.twitter.scrooge.test.gold.thriftscala.Request] = this.subRequests
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        aList = readAListValue(_blob.read)
      case 2 =>
        aSet = readASetValue(_blob.read)
      case 3 =>
        aMap = readAMapValue(_blob.read)
      case 4 =>
        aRequest = _root_.scala.Some(readARequestValue(_blob.read))
      case 5 =>
        subRequests = readSubRequestsValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      aList,
      aSet,
      aMap,
      aRequest,
      subRequests,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): Request = {
    var aList: Seq[String] = this.aList
    var aSet: Set[Int] = this.aSet
    var aMap: Map[Long, Long] = this.aMap
    var aRequest: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.Request] = this.aRequest
    var subRequests: Seq[com.twitter.scrooge.test.gold.thriftscala.Request] = this.subRequests

    _fieldId match {
      case 1 =>
        aList = Seq[String]()
      case 2 =>
        aSet = Set[Int]()
      case 3 =>
        aMap = Map[Long, Long]()
      case 4 =>
        aRequest = _root_.scala.None
      case 5 =>
        subRequests = Seq[com.twitter.scrooge.test.gold.thriftscala.Request]()
      case _ =>
    }
    new Immutable(
      aList,
      aSet,
      aMap,
      aRequest,
      subRequests,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetAList: Request = unsetField(1)

  def unsetASet: Request = unsetField(2)

  def unsetAMap: Request = unsetField(3)

  def unsetARequest: Request = unsetField(4)

  def unsetSubRequests: Request = unsetField(5)


  override def write(_oprot: TProtocol): Unit = {
    Request.validate(this)
    _oprot.writeStructBegin(Struct)
    if (aList ne null) writeAListField(aList, _oprot)
    if (aSet ne null) writeASetField(aSet, _oprot)
    if (aMap ne null) writeAMapField(aMap, _oprot)
    if (aRequest.isDefined) writeARequestField(aRequest.get, _oprot)
    if (subRequests ne null) writeSubRequestsField(subRequests, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    aList: Seq[String] = this.aList,
    aSet: Set[Int] = this.aSet,
    aMap: Map[Long, Long] = this.aMap,
    aRequest: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.Request] = this.aRequest,
    subRequests: Seq[com.twitter.scrooge.test.gold.thriftscala.Request] = this.subRequests,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): Request =
    new Immutable(
      aList,
      aSet,
      aMap,
      aRequest,
      subRequests,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Request]

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[Request]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 5

  override def productElement(n: Int): Any = n match {
    case 0 => this.aList
    case 1 => this.aSet
    case 2 => this.aMap
    case 3 => this.aRequest
    case 4 => this.subRequests
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Request"

  def _codec: ThriftStructCodec3[Request] = Request
}