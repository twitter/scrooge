/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
package com.twitter.scrooge.test.gold.thriftscala

import com.twitter.io.Buf
import com.twitter.scrooge.{
  InvalidFieldsException,
  StructBuilder,
  StructBuilderFactory,
  TFieldBlob,
  ThriftStruct,
  ThriftStructField,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.reflect.{ClassTag, classTag}


object OverCapacityException extends ValidatingThriftStructCodec3[OverCapacityException] with StructBuilderFactory[OverCapacityException] {
  private[this] val _protos: _root_.com.twitter.scrooge.internal.TProtocols = _root_.com.twitter.scrooge.internal.TProtocols()

  val Struct: TStruct = new TStruct("OverCapacityException")
  val ChillTimeSecondsField: TField = new TField("chillTimeSeconds", TType.I32, 1)
  val ChillTimeSecondsFieldManifest: Manifest[Int] = manifest[Int]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      ChillTimeSecondsField,
      false,
      false,
      ChillTimeSecondsFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.apply[String, String](
        ("e.field.annotation", "false")
      ),
      None,
      _root_.scala.Option(0)
    )
  )


  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map[String, String](
        ("e.annotation", "true")
    )

  private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq[ClassTag[_]](
    classTag[Int].asInstanceOf[ClassTag[_]]
  )

  private[this] val structFields: Seq[ThriftStructField[OverCapacityException]] = Seq[ThriftStructField[OverCapacityException]](
    new ThriftStructField[OverCapacityException](
      ChillTimeSecondsField,
      _root_.scala.Some(ChillTimeSecondsFieldManifest),
      classOf[OverCapacityException]) {
        def getValue[R](struct: OverCapacityException): R = struct.chillTimeSeconds.asInstanceOf[R]
    }
  )

  override lazy val metaData: ThriftStructMetaData[OverCapacityException] =
    ThriftStructMetaData(this, structFields, fieldInfos, Nil, structAnnotations)

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: OverCapacityException): Unit = {
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: OverCapacityException): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.chillTimeSeconds)
    buf.toList
  }

  /**
   * Validate that all validation annotations on the struct meet the criteria defined in the
   * corresponding [[com.twitter.scrooge.validation.ThriftConstraintValidator]].
   */
  def validateInstanceValue(item: OverCapacityException): Set[com.twitter.scrooge.validation.ThriftValidationViolation] = {
    val thriftValidator = com.twitter.scrooge.ThriftValidator()
    val violations = scala.collection.mutable.Set.empty[com.twitter.scrooge.validation.ThriftValidationViolation]
    violations ++= validateFieldValue("chillTimeSeconds", item.chillTimeSeconds, fieldInfos.apply(0).fieldAnnotations, thriftValidator);
    violations.toSet
  }

  def withoutPassthroughFields(original: OverCapacityException): OverCapacityException =
    new OverCapacityException(
      chillTimeSeconds = original.chillTimeSeconds
    )

  lazy val unsafeEmpty: OverCapacityException = {
    val chillTimeSeconds: Int = 0

    new OverCapacityException(
      chillTimeSeconds,
      _root_.com.twitter.scrooge.internal.TProtocols.NoPassthroughFields
    )
  }

  def newBuilder(): StructBuilder[OverCapacityException] = new OverCapacityExceptionStructBuilder(_root_.scala.None, fieldTypes)

  override def encode(_item: OverCapacityException, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  override def decode(_iprot: TProtocol): OverCapacityException = {
    decodeInternal(_iprot, false)
  }

  private[this] def decodeInternal(_iprot: TProtocol, lazily: Boolean): OverCapacityException = {
    var chillTimeSeconds: Int = 0

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    do {
      val _field = _iprot.readFieldBegin()
      val _fieldType = _field.`type`
      if (_fieldType == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _root_.com.twitter.scrooge.internal.TProtocols.validateFieldType(TType.I32, _fieldType, "chillTimeSeconds")
            chillTimeSeconds = _iprot.readI32()
          case _ =>
            _passthroughFields = _root_.com.twitter.scrooge.internal.TProtocols.readPassthroughField(_iprot, _field, _passthroughFields)
        }
        _iprot.readFieldEnd()
      }
    } while (!_done)
    _iprot.readStructEnd()


    val _passthroughFieldsResult =
      if (_passthroughFields eq null) _root_.com.twitter.scrooge.internal.TProtocols.NoPassthroughFields
      else _passthroughFields.result()
    new OverCapacityException(
      chillTimeSeconds,
      _passthroughFieldsResult
    )
  }

  def apply(
    chillTimeSeconds: Int
  ): OverCapacityException =
    new OverCapacityException(
      chillTimeSeconds
    )

  def unapply(_item: OverCapacityException): _root_.scala.Some[Int] = _root_.scala.Some(_item.chillTimeSeconds)



}

/**
 * Prefer the companion object's [[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException.apply]]
 * for construction if you don't need to specify passthrough or
 * flags.
 */
class OverCapacityException(
    val chillTimeSeconds: Int,
    val _passthroughFields: immutable$Map[Short, TFieldBlob],
    val flags: Long)
  extends _root_.com.twitter.scrooge.ThriftException with _root_.com.twitter.finagle.SourcedException with ThriftStruct
  with _root_.scala.Product1[Int]
  with ValidatingThriftStruct[OverCapacityException]
  with java.io.Serializable
  with _root_.com.twitter.finagle.FailureFlags[OverCapacityException]
{
  import OverCapacityException._

  def this(
    chillTimeSeconds: Int,
    _passthroughFields: immutable$Map[Short, TFieldBlob]
  ) = this(
    chillTimeSeconds,
    _passthroughFields,
    _root_.com.twitter.finagle.FailureFlags.Empty
  )

  def this(
    chillTimeSeconds: Int
  ) = this(
    chillTimeSeconds,
    immutable$Map.empty
  )

  def _1: Int = chillTimeSeconds


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    val passedthroughValue = _passthroughFields.get(_fieldId)
    if (passedthroughValue.isDefined) {
      passedthroughValue
    } else {
      val _protos = _root_.com.twitter.scrooge.internal.TProtocols()
      val _buff = new TMemoryBuffer(32)
      val _oprot = new TCompactProtocol(_buff)

      val _fieldOpt: _root_.scala.Option[TField] = _fieldId match {
        case 1 =>
            _oprot.writeI32(chillTimeSeconds)
            _root_.scala.Some(OverCapacityException.ChillTimeSecondsField)
        case _ => _root_.scala.None
      }
      if (_fieldOpt.isDefined) {
        _root_.scala.Some(TFieldBlob(_fieldOpt.get, Buf.ByteArray.Owned(_buff.getArray)))
      } else {
        _root_.scala.None
      }
    }
  }


  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids.flatMap { id => getFieldBlob(id).map { fieldBlob => (id, fieldBlob) } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): OverCapacityException = {
    val _protos: _root_.com.twitter.scrooge.internal.TProtocols = _root_.com.twitter.scrooge.internal.TProtocols()
    var chillTimeSeconds: Int = this.chillTimeSeconds
    var _passthroughFields = this._passthroughFields
    val _iprot = _blob.read 
    _blob.id match {
      case 1 =>
        chillTimeSeconds = _iprot.readI32()
      case _ => _passthroughFields += _root_.scala.Tuple2(_blob.id, _blob)
    }
    new OverCapacityException(
      chillTimeSeconds,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): OverCapacityException = {
    var chillTimeSeconds: Int = this.chillTimeSeconds

    _fieldId match {
      case 1 =>
        chillTimeSeconds = 0
      case _ =>
    }
    new OverCapacityException(
      chillTimeSeconds,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetChillTimeSeconds: OverCapacityException = unsetField(1)


  override def write(_oprot: TProtocol): Unit = {
    OverCapacityException.validate(this)
    val _protos = _root_.com.twitter.scrooge.internal.TProtocols()
    _oprot.writeStructBegin(Struct)
    _oprot.writeFieldBegin(ChillTimeSecondsField)
    _oprot.writeI32(chillTimeSeconds)
    _oprot.writeFieldEnd()
    _root_.com.twitter.scrooge.internal.TProtocols.finishWritingStruct(_oprot, _passthroughFields)
  }

  def copy(
    chillTimeSeconds: Int = this.chillTimeSeconds,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): OverCapacityException =
    new OverCapacityException(
      chillTimeSeconds,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[OverCapacityException]

  private[this] def _equals(other: OverCapacityException): Boolean =
      this.productArity == other.productArity &&
      this.productIterator.sameElements(other.productIterator) &&
      this.flags == other.flags &&
      this._passthroughFields == other._passthroughFields

  override def equals(other: Any): Boolean =
    canEqual(other) && _equals(other.asInstanceOf[OverCapacityException])

  override def hashCode: Int = {
    31 * _root_.scala.runtime.ScalaRunTime._hashCode(this) +
      _root_.java.lang.Long.hashCode(this.flags)
  }

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)

  override def productPrefix: String = "OverCapacityException"

  def _codec: ValidatingThriftStructCodec3[OverCapacityException] = OverCapacityException

  protected def copyWithFlags(flags: Long): OverCapacityException =
    new OverCapacityException(
      chillTimeSeconds,
      _passthroughFields,
      flags
    )

  def newBuilder(): StructBuilder[OverCapacityException] = new OverCapacityExceptionStructBuilder(_root_.scala.Some(this), fieldTypes)
}

private[thriftscala] class OverCapacityExceptionStructBuilder(instance: _root_.scala.Option[OverCapacityException], fieldTypes: IndexedSeq[ClassTag[_]])
    extends StructBuilder[OverCapacityException](fieldTypes) {

  def build(): OverCapacityException = {
    val _fieldArray = fieldArray // shadow variable
    if (instance.isDefined) {
      val instanceValue = instance.get
      OverCapacityException(
        if (_fieldArray(0) == null) instanceValue.chillTimeSeconds else _fieldArray(0).asInstanceOf[Int]
      )
    } else {
      if (genericArrayOps(_fieldArray).contains(null)) throw new InvalidFieldsException(structBuildError("OverCapacityException"))
      OverCapacityException(
        _fieldArray(0).asInstanceOf[Int]
      )
    }
  }
}

