/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
package com.twitter.scrooge.test.gold.thriftscala

import com.twitter.scrooge._
import com.twitter.finagle.{
  service => ctfs,
  Filter => finagle$Filter,
  Service => finagle$Service,
  thrift => _,
  _
}
import com.twitter.finagle.stats.{Counter, StatsReceiver}
import com.twitter.finagle.thrift.{
  Protocols,
  RichClientParam,
  RichServerParam,
  ServerToReqRep,
  ThriftClientRequest
}
import com.twitter.util.{Future, Return, Throw, Throwables}
import com.twitter.io.Buf
import org.apache.thrift.protocol._
import org.apache.thrift.TApplicationException
import scala.collection.mutable.Builder
import scala.collection.immutable.{Map => immutable$Map, Set => immutable$Set}
import scala.language.higherKinds
import scala.reflect.{ClassTag, classTag}


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
trait PlatinumService[+MM[_]] extends GoldService[MM] {
  
  def moreCoolThings(request: com.twitter.scrooge.test.gold.thriftscala.Request): MM[Int]

  /**
   * Used to close the underlying `Service`.
   * Not a user-defined API.
   */
  override def asClosable: _root_.com.twitter.util.Closable = _root_.com.twitter.util.Closable.nop
}


object PlatinumService extends _root_.com.twitter.finagle.thrift.GeneratedThriftService { self =>

  val annotations: immutable$Map[String, String] = immutable$Map.empty

  val methods: immutable$Set[ThriftMethod] = immutable$Set(
    self.MoreCoolThings,
    com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings,
    com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall
  )

  trait ServicePerEndpoint
    extends com.twitter.scrooge.test.gold.thriftscala.GoldService.ServicePerEndpoint
    with _root_.com.twitter.finagle.thrift.service.Filterable[ServicePerEndpoint] {
    def moreCoolThings : _root_.com.twitter.finagle.Service[self.MoreCoolThings.Args, self.MoreCoolThings.SuccessType]

    def withMoreCoolThings(moreCoolThings : _root_.com.twitter.finagle.Service[self.MoreCoolThings.Args, self.MoreCoolThings.SuccessType]): ServicePerEndpoint = this

    override def withDoGreatThings(doGreatThings : _root_.com.twitter.finagle.Service[com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings.Args, com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings.SuccessType]): ServicePerEndpoint = this

    override def withNoExceptionCall(noExceptionCall : _root_.com.twitter.finagle.Service[com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall.Args, com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall.SuccessType]): ServicePerEndpoint = this

    /**
     * Prepends the given type-agnostic `Filter` to all of the `Services`
     * and returns a copy of the `ServicePerEndpoint` now including the filter.
     */
    override def filtered(filter: _root_.com.twitter.finagle.Filter.TypeAgnostic): ServicePerEndpoint =
      ServicePerEndpoint.apply(moreCoolThings, doGreatThings, noExceptionCall).filtered(filter)

    /**
     * Converts the `ServicePerEndpoint` to a `GeneratedThriftService`.
     * @see _root_.com.twitter.scrooge.ToThriftService
     */
    override def toThriftService: _root_.com.twitter.finagle.thrift.ThriftService = MethodPerEndpoint(this)

    /**
     * Used to close the underlying `Service`.
     * Not a user-defined API.
     */
    override def asClosable: _root_.com.twitter.util.Closable = _root_.com.twitter.util.Closable.nop
  }

  trait ReqRepServicePerEndpoint
    extends com.twitter.scrooge.test.gold.thriftscala.GoldService.ReqRepServicePerEndpoint
    with _root_.com.twitter.finagle.thrift.service.Filterable[ReqRepServicePerEndpoint] {
    def moreCoolThings : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.MoreCoolThings.Args], _root_.com.twitter.scrooge.Response[self.MoreCoolThings.SuccessType]]

    def withMoreCoolThings(moreCoolThings : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.MoreCoolThings.Args], _root_.com.twitter.scrooge.Response[self.MoreCoolThings.SuccessType]]): ReqRepServicePerEndpoint = this

    override def withDoGreatThings(doGreatThings : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings.Args], _root_.com.twitter.scrooge.Response[com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings.SuccessType]]): ReqRepServicePerEndpoint = this

    override def withNoExceptionCall(noExceptionCall : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall.Args], _root_.com.twitter.scrooge.Response[com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall.SuccessType]]): ReqRepServicePerEndpoint = this

    /**
     * Prepends the given type-agnostic `Filter` to all of the `Services`
     * and returns a copy of the `ServicePerEndpoint` now including the filter.
     */
    override def filtered(filter: com.twitter.finagle.Filter.TypeAgnostic): ReqRepServicePerEndpoint =
      ReqRepServicePerEndpoint.apply(moreCoolThings, doGreatThings, noExceptionCall).filtered(filter)

    /**
     * Converts the `ServicePerEndpoint` to a `GeneratedThriftService`.
     * @see _root_.com.twitter.scrooge.ToThriftService
     */
    override def toThriftService: _root_.com.twitter.finagle.thrift.ThriftService = ReqRepMethodPerEndpoint(this)

    /**
     * Used to close the underlying `Service`.
     * Not a user-defined API.
     */
    override def asClosable: _root_.com.twitter.util.Closable = _root_.com.twitter.util.Closable.nop
  }

  @deprecated("Use ServicePerEndpoint", "2017-11-07")
  trait BaseServiceIface extends com.twitter.scrooge.test.gold.thriftscala.GoldService.BaseServiceIface {
    def moreCoolThings : com.twitter.finagle.Service[self.MoreCoolThings.Args, self.MoreCoolThings.SuccessType]

    override def toThriftService: _root_.com.twitter.finagle.thrift.ThriftService = new MethodIface(this)
  }

  object ServicePerEndpoint {

    def apply(
      moreCoolThings : _root_.com.twitter.finagle.Service[self.MoreCoolThings.Args, self.MoreCoolThings.SuccessType],
      doGreatThings : _root_.com.twitter.finagle.Service[com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings.Args, com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings.SuccessType],
      noExceptionCall : _root_.com.twitter.finagle.Service[com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall.Args, com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall.SuccessType]
    ): ServicePerEndpoint = new ServicePerEndpointImpl(moreCoolThings, doGreatThings, noExceptionCall)

    private final class ServicePerEndpointImpl(
      override val moreCoolThings : _root_.com.twitter.finagle.Service[self.MoreCoolThings.Args, self.MoreCoolThings.SuccessType],
      override val doGreatThings : _root_.com.twitter.finagle.Service[com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings.Args, com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings.SuccessType],
      override val noExceptionCall : _root_.com.twitter.finagle.Service[com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall.Args, com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall.SuccessType]
    ) extends ServicePerEndpoint {

      override def withMoreCoolThings(
        moreCoolThings : _root_.com.twitter.finagle.Service[self.MoreCoolThings.Args, self.MoreCoolThings.SuccessType]
      ): ServicePerEndpoint =
        new ServicePerEndpointImpl(moreCoolThings, doGreatThings, noExceptionCall)

      override def withDoGreatThings(
        doGreatThings : _root_.com.twitter.finagle.Service[com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings.Args, com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings.SuccessType]
      ): ServicePerEndpoint =
        new ServicePerEndpointImpl(moreCoolThings, doGreatThings, noExceptionCall)

      override def withNoExceptionCall(
        noExceptionCall : _root_.com.twitter.finagle.Service[com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall.Args, com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall.SuccessType]
      ): ServicePerEndpoint =
        new ServicePerEndpointImpl(moreCoolThings, doGreatThings, noExceptionCall)

      override def filtered(filter: _root_.com.twitter.finagle.Filter.TypeAgnostic): ServicePerEndpoint =
        new ServicePerEndpointImpl(
          moreCoolThings = filter.toFilter.andThen(moreCoolThings),
          doGreatThings = filter.toFilter.andThen(doGreatThings),
          noExceptionCall = filter.toFilter.andThen(noExceptionCall)
        )

      override def asClosable: _root_.com.twitter.util.Closable =
        _root_.com.twitter.util.Closable.all(
          this.moreCoolThings,
          this.doGreatThings,
          this.noExceptionCall
        )
    }
  }

  object ReqRepServicePerEndpoint {

    def apply(
      moreCoolThings :  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.MoreCoolThings.Args], _root_.com.twitter.scrooge.Response[self.MoreCoolThings.SuccessType]],
      doGreatThings :  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings.Args], _root_.com.twitter.scrooge.Response[com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings.SuccessType]],
      noExceptionCall :  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall.Args], _root_.com.twitter.scrooge.Response[com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall.SuccessType]]
    ): ReqRepServicePerEndpoint =
      new ReqRepServicePerEndpointImpl(moreCoolThings, doGreatThings, noExceptionCall)

    private final class ReqRepServicePerEndpointImpl(
      override val moreCoolThings : _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.MoreCoolThings.Args], _root_.com.twitter.scrooge.Response[self.MoreCoolThings.SuccessType]],
      override val doGreatThings : _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings.Args], _root_.com.twitter.scrooge.Response[com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings.SuccessType]],
      override val noExceptionCall : _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall.Args], _root_.com.twitter.scrooge.Response[com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall.SuccessType]]
    ) extends ReqRepServicePerEndpoint {

      override def withMoreCoolThings(
        moreCoolThings : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.MoreCoolThings.Args], _root_.com.twitter.scrooge.Response[self.MoreCoolThings.SuccessType]]
      ): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(moreCoolThings, doGreatThings, noExceptionCall)
      override def withDoGreatThings(
        doGreatThings : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings.Args], _root_.com.twitter.scrooge.Response[com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings.SuccessType]]
      ): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(moreCoolThings, doGreatThings, noExceptionCall)
      override def withNoExceptionCall(
        noExceptionCall : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall.Args], _root_.com.twitter.scrooge.Response[com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall.SuccessType]]
      ): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(moreCoolThings, doGreatThings, noExceptionCall)

      override def filtered(filter: com.twitter.finagle.Filter.TypeAgnostic): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(
          moreCoolThings = filter.toFilter.andThen(moreCoolThings),
          doGreatThings = filter.toFilter.andThen(doGreatThings),
          noExceptionCall = filter.toFilter.andThen(noExceptionCall)
        )

      override def asClosable: _root_.com.twitter.util.Closable =
        _root_.com.twitter.util.Closable.all(
          this.moreCoolThings,
          this.doGreatThings,
          this.noExceptionCall
        )
    }
  }

  def unsafeBuildFromMethods(methods: immutable$Map[ThriftMethod,  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[_], _root_.com.twitter.scrooge.Response[_]]]): ReqRepServicePerEndpoint = {
    val moreCoolThings = {
      val moreCoolThingsOpt = methods.get(self.MoreCoolThings)
      if (moreCoolThingsOpt.isEmpty) throw new IllegalArgumentException(_root_.java.lang.String.format("No implementation found for method MoreCoolThings in %s", methods.keySet))
      moreCoolThingsOpt.get.asInstanceOf[self.MoreCoolThings.ReqRepServicePerEndpointServiceType]
    }
    val doGreatThings = {
      val doGreatThingsOpt = methods.get(com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings)
      if (doGreatThingsOpt.isEmpty) throw new IllegalArgumentException(_root_.java.lang.String.format("No implementation found for method DoGreatThings in %s", methods.keySet))
      doGreatThingsOpt.get.asInstanceOf[com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings.ReqRepServicePerEndpointServiceType]
    }
    val noExceptionCall = {
      val noExceptionCallOpt = methods.get(com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall)
      if (noExceptionCallOpt.isEmpty) throw new IllegalArgumentException(_root_.java.lang.String.format("No implementation found for method NoExceptionCall in %s", methods.keySet))
      noExceptionCallOpt.get.asInstanceOf[com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall.ReqRepServicePerEndpointServiceType]
    }

    ReqRepServicePerEndpoint(moreCoolThings, doGreatThings, noExceptionCall)
  }

  @deprecated("Use ServicePerEndpoint", "2017-11-07")
  case class ServiceIface(
    moreCoolThings : com.twitter.finagle.Service[self.MoreCoolThings.Args, self.MoreCoolThings.SuccessType],
    doGreatThings : com.twitter.finagle.Service[com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings.Args, com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings.SuccessType],
    noExceptionCall : com.twitter.finagle.Service[com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall.Args, com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall.SuccessType]
  ) extends com.twitter.scrooge.test.gold.thriftscala.GoldService.BaseServiceIface
    with BaseServiceIface
    with _root_.com.twitter.finagle.thrift.service.Filterable[ServiceIface] {

    /**
     * Prepends the given type-agnostic `Filter` to all of the `Services`
     * and returns a copy of the `ServiceIface` now including the filter.
     */
    def filtered(filter: com.twitter.finagle.Filter.TypeAgnostic): ServiceIface =
      copy(
        moreCoolThings = filter.toFilter.andThen(moreCoolThings),
        doGreatThings = filter.toFilter.andThen(doGreatThings),
        noExceptionCall = filter.toFilter.andThen(noExceptionCall)
      )
  }

  implicit object ServicePerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.ServicePerEndpointBuilder[ServicePerEndpoint] {
      override def serviceClass: Class[ServicePerEndpoint] = classOf[ServicePerEndpoint]
      def servicePerEndpoint(
        thriftService: _root_.com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        clientParam: RichClientParam
      ): ServicePerEndpoint =
        ServicePerEndpoint(
          moreCoolThings = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            self.MoreCoolThings,
            thriftService,
            clientParam
          ),
          doGreatThings = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings,
            thriftService,
            clientParam
          ),
          noExceptionCall = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall,
            thriftService,
            clientParam
          )
        )
  }

  implicit object ReqRepServicePerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.ReqRepServicePerEndpointBuilder[ReqRepServicePerEndpoint] {
      override def serviceClass: Class[ReqRepServicePerEndpoint] = classOf[ReqRepServicePerEndpoint]
      def servicePerEndpoint(
        thriftService: _root_.com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        clientParam: RichClientParam
      ): ReqRepServicePerEndpoint =
        ReqRepServicePerEndpoint(
          moreCoolThings = _root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint(self.MoreCoolThings, thriftService, clientParam),
          doGreatThings = _root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint(com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings, thriftService, clientParam),
          noExceptionCall = _root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint(com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall, thriftService, clientParam)
        )
  }

  @deprecated("Use ServicePerEndpointBuilder", "2017-11-07")
  implicit object ServiceIfaceBuilder
    extends com.twitter.finagle.thrift.ServiceIfaceBuilder[ServiceIface] {
      override def serviceClass: Class[ServiceIface] = classOf[ServiceIface]
      def newServiceIface(
        binaryService: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        clientParam: RichClientParam
      ): ServiceIface =
        ServiceIface(
          moreCoolThings = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            self.MoreCoolThings,
            binaryService,
            clientParam
          ),
          doGreatThings = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            com.twitter.scrooge.test.gold.thriftscala.GoldService.DoGreatThings,
            binaryService,
            clientParam
          ),
          noExceptionCall = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            com.twitter.scrooge.test.gold.thriftscala.GoldService.NoExceptionCall,
            binaryService,
            clientParam
          )
        )
  }

  object MoreCoolThings extends ThriftMethod {
    
    object Args extends ValidatingThriftStructCodec3[Args] with StructBuilderFactory[Args] {
      private[this] val _protos: _root_.com.twitter.scrooge.internal.TProtocols = _root_.com.twitter.scrooge.internal.TProtocols()
    
      val Struct: TStruct = new TStruct("moreCoolThings_args")
      val RequestField: TField = new TField("request", TType.STRUCT, 1)
      val RequestFieldManifest: Manifest[com.twitter.scrooge.test.gold.thriftscala.Request] = manifest[com.twitter.scrooge.test.gold.thriftscala.Request]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          RequestField,
          false,
          false,
          RequestFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None,
          _root_.scala.Option(com.twitter.scrooge.test.gold.thriftscala.Request.unsafeEmpty)
        )
      )
    
    
      val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq[ClassTag[_]](
        classTag[com.twitter.scrooge.test.gold.thriftscala.Request].asInstanceOf[ClassTag[_]]
      )
    
      private[this] val structFields: Seq[ThriftStructField[Args]] = Seq[ThriftStructField[Args]](
        new ThriftStructField[Args](
          RequestField,
          _root_.scala.Some(RequestFieldManifest),
          classOf[Args]) {
            def getValue[R](struct: Args): R = struct.request.asInstanceOf[R]
        }
      )
    
      override lazy val metaData: ThriftStructMetaData[Args] =
        ThriftStructMetaData(this, structFields, fieldInfos, Nil, structAnnotations)
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Args): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf ++= validateField(item.request)
        buf.toList
      }
    
      /**
       * Validate that all validation annotations on the struct meet the criteria defined in the
       * corresponding [[com.twitter.scrooge.validation.ThriftConstraintValidator]].
       */
      def validateInstanceValue(item: Args): Set[com.twitter.scrooge.validation.ThriftValidationViolation] = {
        val thriftValidator = com.twitter.scrooge.ThriftValidator()
        val violations = scala.collection.mutable.Set.empty[com.twitter.scrooge.validation.ThriftValidationViolation]
        violations ++= validateFieldValue("request", item.request, fieldInfos.apply(0).fieldAnnotations, thriftValidator);
        violations.toSet
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          request =
            {
              val field = original.request
              com.twitter.scrooge.test.gold.thriftscala.Request.withoutPassthroughFields(field)
            }
        )
    
      lazy val unsafeEmpty: Args = {
        val request: com.twitter.scrooge.test.gold.thriftscala.Request = com.twitter.scrooge.test.gold.thriftscala.Request.unsafeEmpty
    
        new Args(
          request,
          _root_.com.twitter.scrooge.internal.TProtocols.NoPassthroughFields
        )
      }
    
      def newBuilder(): StructBuilder[Args] = new ArgsStructBuilder(_root_.scala.None, fieldTypes)
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Args = {
        decodeInternal(_iprot, false)
      }
    
      private[this] def decodeInternal(_iprot: TProtocol, lazily: Boolean): Args = {
        var request: com.twitter.scrooge.test.gold.thriftscala.Request = null
    
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        do {
          val _field = _iprot.readFieldBegin()
          val _fieldType = _field.`type`
          if (_fieldType == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _root_.com.twitter.scrooge.internal.TProtocols.validateFieldType(TType.STRUCT, _fieldType, "request")
                request = com.twitter.scrooge.test.gold.thriftscala.Request.decode(_iprot)
              case _ =>
                _passthroughFields = _root_.com.twitter.scrooge.internal.TProtocols.readPassthroughField(_iprot, _field, _passthroughFields)
            }
            _iprot.readFieldEnd()
          }
        } while (!_done)
        _iprot.readStructEnd()
    
    
        val _passthroughFieldsResult =
          if (_passthroughFields eq null) _root_.com.twitter.scrooge.internal.TProtocols.NoPassthroughFields
          else _passthroughFields.result()
        new Args(
          request,
          _passthroughFieldsResult
        )
      }
    
      def apply(
        request: com.twitter.scrooge.test.gold.thriftscala.Request
      ): Args =
        new Args(
          request
        )
    
      def unapply(_item: Args): _root_.scala.Some[com.twitter.scrooge.test.gold.thriftscala.Request] = _root_.scala.Some(_item.request)
    
    
    
    }
    
    class Args(
        val request: com.twitter.scrooge.test.gold.thriftscala.Request,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product1[com.twitter.scrooge.test.gold.thriftscala.Request]
      with ValidatingThriftStruct[Args]
      with java.io.Serializable
    {
      import Args._
    
      def this(
        request: com.twitter.scrooge.test.gold.thriftscala.Request
      ) = this(
        request,
        immutable$Map.empty
      )
    
      def _1: com.twitter.scrooge.test.gold.thriftscala.Request = request
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        val _protos = _root_.com.twitter.scrooge.internal.TProtocols()
        _oprot.writeStructBegin(Struct)
        if (request ne null) {
          _oprot.writeFieldBegin(RequestField)
          request.write(_oprot)
          _oprot.writeFieldEnd()
        }
        _root_.com.twitter.scrooge.internal.TProtocols.finishWritingStruct(_oprot, _passthroughFields)
      }
    
      def copy(
        request: com.twitter.scrooge.test.gold.thriftscala.Request = this.request,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          request,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private[this] def _equals(other: Args): Boolean =
          this.productArity == other.productArity &&
          this.productIterator.sameElements(other.productIterator) &&
          this._passthroughFields == other._passthroughFields
    
      override def equals(other: Any): Boolean =
        canEqual(other) && _equals(other.asInstanceOf[Args])
    
      override def hashCode: Int = {
        _root_.scala.runtime.ScalaRunTime._hashCode(this)
      }
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
      override def productPrefix: String = "Args"
    
      def _codec: ValidatingThriftStructCodec3[Args] = Args
    
      def newBuilder(): StructBuilder[Args] = new ArgsStructBuilder(_root_.scala.Some(this), fieldTypes)
    }
    
    private[thriftscala] class ArgsStructBuilder(instance: _root_.scala.Option[Args], fieldTypes: IndexedSeq[ClassTag[_]])
        extends StructBuilder[Args](fieldTypes) {
    
      def build(): Args = {
        val _fieldArray = fieldArray // shadow variable
        if (instance.isDefined) {
          val instanceValue = instance.get
          Args(
            if (_fieldArray(0) == null) instanceValue.request else _fieldArray(0).asInstanceOf[com.twitter.scrooge.test.gold.thriftscala.Request]
          )
        } else {
          if (genericArrayOps(_fieldArray).contains(null)) throw new InvalidFieldsException(structBuildError("Args"))
          Args(
            _fieldArray(0).asInstanceOf[com.twitter.scrooge.test.gold.thriftscala.Request]
          )
        }
      }
    }

    type SuccessType = Int
    
    object Result extends ValidatingThriftStructCodec3[Result] with StructBuilderFactory[Result] {
      private[this] val _protos: _root_.com.twitter.scrooge.internal.TProtocols = _root_.com.twitter.scrooge.internal.TProtocols()
    
      val Struct: TStruct = new TStruct("moreCoolThings_result")
      val SuccessField: TField = new TField("success", TType.I32, 0)
      val SuccessFieldManifest: Manifest[Int] = manifest[Int]
      val AxField: TField = new TField("ax", TType.STRUCT, 1)
      val AxFieldManifest: Manifest[com.twitter.scrooge.test.gold.thriftscala.AnotherException] = manifest[com.twitter.scrooge.test.gold.thriftscala.AnotherException]
      val OceField: TField = new TField("oce", TType.STRUCT, 2)
      val OceFieldManifest: Manifest[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException] = manifest[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None,
          _root_.scala.Option(0)
        ),
        new ThriftStructFieldInfo(
          AxField,
          true,
          false,
          AxFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None,
          _root_.scala.Option(com.twitter.scrooge.test.gold.thriftscala.AnotherException.unsafeEmpty)
        ),
        new ThriftStructFieldInfo(
          OceField,
          true,
          false,
          OceFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None,
          _root_.scala.Option(com.twitter.scrooge.test.gold.thriftscala.OverCapacityException.unsafeEmpty)
        )
      )
    
    
      val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      private val fieldTypes: IndexedSeq[ClassTag[_]] = IndexedSeq[ClassTag[_]](
        classTag[_root_.scala.Option[Int]].asInstanceOf[ClassTag[_]],
        classTag[_root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.AnotherException]].asInstanceOf[ClassTag[_]],
        classTag[_root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException]].asInstanceOf[ClassTag[_]]
      )
    
      private[this] val structFields: Seq[ThriftStructField[Result]] = Seq[ThriftStructField[Result]](
        new ThriftStructField[Result](
          SuccessField,
          _root_.scala.Some(SuccessFieldManifest),
          classOf[Result]) {
            def getValue[R](struct: Result): R = struct.success.asInstanceOf[R]
        },
        new ThriftStructField[Result](
          AxField,
          _root_.scala.Some(AxFieldManifest),
          classOf[Result]) {
            def getValue[R](struct: Result): R = struct.ax.asInstanceOf[R]
        },
        new ThriftStructField[Result](
          OceField,
          _root_.scala.Some(OceFieldManifest),
          classOf[Result]) {
            def getValue[R](struct: Result): R = struct.oce.asInstanceOf[R]
        }
      )
    
      override lazy val metaData: ThriftStructMetaData[Result] =
        ThriftStructMetaData(this, structFields, fieldInfos, Nil, structAnnotations)
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Result): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf ++= validateField(item.success)
        buf ++= validateField(item.ax)
        buf ++= validateField(item.oce)
        buf.toList
      }
    
      /**
       * Validate that all validation annotations on the struct meet the criteria defined in the
       * corresponding [[com.twitter.scrooge.validation.ThriftConstraintValidator]].
       */
      def validateInstanceValue(item: Result): Set[com.twitter.scrooge.validation.ThriftValidationViolation] = {
        val thriftValidator = com.twitter.scrooge.ThriftValidator()
        val violations = scala.collection.mutable.Set.empty[com.twitter.scrooge.validation.ThriftValidationViolation]
        violations ++= validateFieldValue("success", item.success, fieldInfos.apply(0).fieldAnnotations, thriftValidator);
        violations ++= validateFieldValue("ax", item.ax, fieldInfos.apply(1).fieldAnnotations, thriftValidator);
        violations ++= validateFieldValue("oce", item.oce, fieldInfos.apply(2).fieldAnnotations, thriftValidator);
        violations.toSet
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success = original.success,
          ax =
            {
              val field = original.ax
              field.map { field =>
                com.twitter.scrooge.test.gold.thriftscala.AnotherException.withoutPassthroughFields(field)
              }
            },
          oce =
            {
              val field = original.oce
              field.map { field =>
                com.twitter.scrooge.test.gold.thriftscala.OverCapacityException.withoutPassthroughFields(field)
              }
            }
        )
    
      lazy val unsafeEmpty: Result = {
        val success: _root_.scala.Option[Int] = _root_.scala.None
        val ax: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.AnotherException] = _root_.scala.None
        val oce: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException] = _root_.scala.None
    
        new Result(
          success,
          ax,
          oce,
          _root_.com.twitter.scrooge.internal.TProtocols.NoPassthroughFields
        )
      }
    
      def newBuilder(): StructBuilder[Result] = new ResultStructBuilder(_root_.scala.None, fieldTypes)
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Result = {
        decodeInternal(_iprot, false)
      }
    
      private[this] def decodeInternal(_iprot: TProtocol, lazily: Boolean): Result = {
        var success: Option[Int] = None
        var ax: Option[com.twitter.scrooge.test.gold.thriftscala.AnotherException] = None
        var oce: Option[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException] = None
    
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        do {
          val _field = _iprot.readFieldBegin()
          val _fieldType = _field.`type`
          if (_fieldType == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _root_.com.twitter.scrooge.internal.TProtocols.validateFieldType(TType.I32, _fieldType, "success")
                success = _root_.scala.Some(_iprot.readI32())
              case 1 =>
                _root_.com.twitter.scrooge.internal.TProtocols.validateFieldType(TType.STRUCT, _fieldType, "ax")
                ax = _root_.scala.Some(com.twitter.scrooge.test.gold.thriftscala.AnotherException.decode(_iprot))
              case 2 =>
                _root_.com.twitter.scrooge.internal.TProtocols.validateFieldType(TType.STRUCT, _fieldType, "oce")
                oce = _root_.scala.Some(com.twitter.scrooge.test.gold.thriftscala.OverCapacityException.decode(_iprot))
              case _ =>
                _passthroughFields = _root_.com.twitter.scrooge.internal.TProtocols.readPassthroughField(_iprot, _field, _passthroughFields)
            }
            _iprot.readFieldEnd()
          }
        } while (!_done)
        _iprot.readStructEnd()
    
    
        val _passthroughFieldsResult =
          if (_passthroughFields eq null) _root_.com.twitter.scrooge.internal.TProtocols.NoPassthroughFields
          else _passthroughFields.result()
        new Result(
          success,
          ax,
          oce,
          _passthroughFieldsResult
        )
      }
    
      def apply(
        success: _root_.scala.Option[Int] = _root_.scala.None,
        ax: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.AnotherException] = _root_.scala.None,
        oce: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException] = _root_.scala.None
      ): Result =
        new Result(
          success,
          ax,
          oce
        )
    
      def unapply(_item: Result): _root_.scala.Some[_root_.scala.Tuple3[Option[Int], Option[com.twitter.scrooge.test.gold.thriftscala.AnotherException], Option[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException]]] = _root_.scala.Some(_item.toTuple)
    
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Int],
        val ax: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.AnotherException],
        val oce: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Int] with ThriftStruct
      with _root_.scala.Product3[Option[Int], Option[com.twitter.scrooge.test.gold.thriftscala.AnotherException], Option[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException]]
      with ValidatingThriftStruct[Result]
      with java.io.Serializable
    {
      import Result._
    
      def this(
        success: _root_.scala.Option[Int] = _root_.scala.None,
        ax: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.AnotherException] = _root_.scala.None,
        oce: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException] = _root_.scala.None
      ) = this(
        success,
        ax,
        oce,
        immutable$Map.empty
      )
    
      def _1: _root_.scala.Option[Int] = success
      def _2: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.AnotherException] = ax
      def _3: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException] = oce
    
      def toTuple: _root_.scala.Tuple3[Option[Int], Option[com.twitter.scrooge.test.gold.thriftscala.AnotherException], Option[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException]] =
        _root_.scala.Tuple3[Option[Int], Option[com.twitter.scrooge.test.gold.thriftscala.AnotherException], Option[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException]](
          success,
          ax,
          oce
        )
    
      def successField: Option[Int] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq(ax, oce)
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        val _protos = _root_.com.twitter.scrooge.internal.TProtocols()
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) {
          _oprot.writeFieldBegin(SuccessField)
          _oprot.writeI32(success.get)
          _oprot.writeFieldEnd()
        }
        if (ax.isDefined) {
          _oprot.writeFieldBegin(AxField)
          ax.get.write(_oprot)
          _oprot.writeFieldEnd()
        }
        if (oce.isDefined) {
          _oprot.writeFieldBegin(OceField)
          oce.get.write(_oprot)
          _oprot.writeFieldEnd()
        }
        _root_.com.twitter.scrooge.internal.TProtocols.finishWritingStruct(_oprot, _passthroughFields)
      }
    
      def copy(
        success: _root_.scala.Option[Int] = this.success,
        ax: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.AnotherException] = this.ax,
        oce: _root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException] = this.oce,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          ax,
          oce,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private[this] def _equals(other: Result): Boolean =
          this.productArity == other.productArity &&
          this.productIterator.sameElements(other.productIterator) &&
          this._passthroughFields == other._passthroughFields
    
      override def equals(other: Any): Boolean =
        canEqual(other) && _equals(other.asInstanceOf[Result])
    
      override def hashCode: Int = {
        _root_.scala.runtime.ScalaRunTime._hashCode(this)
      }
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
      override def productPrefix: String = "Result"
    
      def _codec: ValidatingThriftStructCodec3[Result] = Result
    
      def newBuilder(): StructBuilder[Result] = new ResultStructBuilder(_root_.scala.Some(this), fieldTypes)
    }
    
    private[thriftscala] class ResultStructBuilder(instance: _root_.scala.Option[Result], fieldTypes: IndexedSeq[ClassTag[_]])
        extends StructBuilder[Result](fieldTypes) {
    
      def build(): Result = {
        val _fieldArray = fieldArray // shadow variable
        if (instance.isDefined) {
          val instanceValue = instance.get
          Result(
            if (_fieldArray(0) == null) instanceValue.success else _fieldArray(0).asInstanceOf[_root_.scala.Option[Int]],
            if (_fieldArray(1) == null) instanceValue.ax else _fieldArray(1).asInstanceOf[_root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.AnotherException]],
            if (_fieldArray(2) == null) instanceValue.oce else _fieldArray(2).asInstanceOf[_root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException]]
          )
        } else {
          if (genericArrayOps(_fieldArray).contains(null)) throw new InvalidFieldsException(structBuildError("Result"))
          Result(
            _fieldArray(0).asInstanceOf[_root_.scala.Option[Int]],
            _fieldArray(1).asInstanceOf[_root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.AnotherException]],
            _fieldArray(2).asInstanceOf[_root_.scala.Option[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException]]
          )
        }
      }
    }

    val annotations: immutable$Map[String, String] = immutable$Map.empty

    type FunctionType = Function1[Args,Future[Int]]
    type ReqRepFunctionType = Function1[_root_.com.twitter.scrooge.Request[Args],Future[_root_.com.twitter.scrooge.Response[Int]]]

    type ServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ReqRepServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]]

    def toServicePerEndpointService(f: FunctionType): ServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toReqRepServicePerEndpointService(f: ReqRepFunctionType): ReqRepServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]] { request: _root_.com.twitter.scrooge.Request[Args] =>
        f(request)
      }


    val name: String = "moreCoolThings"
    val serviceName: String = "PlatinumService"
    val argsCodec: Args.type = Args
    val responseCodec: Result.type = Result
    val oneway: Boolean = false
  }

  // Compatibility aliases.
  val moreCoolThings$args: MoreCoolThings.Args.type = MoreCoolThings.Args
  type moreCoolThings$args = MoreCoolThings.Args

  val moreCoolThings$result: MoreCoolThings.Result.type = MoreCoolThings.Result
  type moreCoolThings$result = MoreCoolThings.Result


  trait MethodPerEndpoint
    extends com.twitter.scrooge.test.gold.thriftscala.GoldService.MethodPerEndpoint
    with PlatinumService[Future] {
    
    def moreCoolThings(request: com.twitter.scrooge.test.gold.thriftscala.Request): Future[Int]
  }

  object MethodPerEndpoint {

    def apply(servicePerEndpoint: ServicePerEndpoint): MethodPerEndpoint = {
      new MethodPerEndpointImpl(servicePerEndpoint) {}
    }

    /**
     * Use `MethodPerEndpoint.apply()` instead of this constructor.
     */
    class MethodPerEndpointImpl protected (servicePerEndpoint: ServicePerEndpoint)
      extends com.twitter.scrooge.test.gold.thriftscala.GoldService.MethodPerEndpoint.MethodPerEndpointImpl(servicePerEndpoint)
      with MethodPerEndpoint {
        def moreCoolThings(request: com.twitter.scrooge.test.gold.thriftscala.Request): Future[Int] =
          servicePerEndpoint.moreCoolThings(self.MoreCoolThings.Args(request))

        override def asClosable: _root_.com.twitter.util.Closable =
          servicePerEndpoint.asClosable
    }
  }

  object ReqRepMethodPerEndpoint {

    def apply(servicePerEndpoint: ReqRepServicePerEndpoint): MethodPerEndpoint =
      new ReqRepMethodPerEndpointImpl(servicePerEndpoint) { }

    /**
     * Use `ReqRepMethodPerEndpoint.apply()` instead of this constructor.
     */
    class ReqRepMethodPerEndpointImpl protected (servicePerEndpoint: ReqRepServicePerEndpoint)
      extends com.twitter.scrooge.test.gold.thriftscala.GoldService.ReqRepMethodPerEndpoint.ReqRepMethodPerEndpointImpl(servicePerEndpoint)
      with MethodPerEndpoint {

        def moreCoolThings(request: com.twitter.scrooge.test.gold.thriftscala.Request): Future[Int] = {
          val requestCtx = _root_.com.twitter.finagle.context.Contexts.local.getOrElse(_root_.com.twitter.finagle.thrift.Headers.Request.Key, () => _root_.com.twitter.finagle.thrift.Headers.Request.newValues)
          val scroogeRequest = _root_.com.twitter.scrooge.Request(requestCtx.values, self.MoreCoolThings.Args(request))
          servicePerEndpoint.moreCoolThings(scroogeRequest).transform(_root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint.transformResult)
        }

        override def asClosable: _root_.com.twitter.util.Closable =
          servicePerEndpoint.asClosable
    }
  }

  @deprecated("Use MethodPerEndpoint", "2017-11-07")
  class MethodIface(serviceIface: BaseServiceIface)
    extends com.twitter.scrooge.test.gold.thriftscala.GoldService.MethodIface(serviceIface)
    with FutureIface {
    def moreCoolThings(request: com.twitter.scrooge.test.gold.thriftscala.Request): Future[Int] =
      serviceIface.moreCoolThings(self.MoreCoolThings.Args(request))
  }

  implicit object MethodPerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.MethodPerEndpointBuilder[ServicePerEndpoint, MethodPerEndpoint] {
    def methodPerEndpoint(servicePerEndpoint: ServicePerEndpoint): MethodPerEndpoint =
      MethodPerEndpoint(servicePerEndpoint)
  }

  @deprecated("Use MethodPerEndpointBuilder", "2018-01-12")
  implicit object ThriftServiceBuilder
    extends _root_.com.twitter.finagle.thrift.service.ThriftServiceBuilder[ServicePerEndpoint, PlatinumService[Future]] {
    def build(servicePerEndpoint: ServicePerEndpoint): MethodPerEndpoint =
      MethodPerEndpoint(servicePerEndpoint)
  }

  implicit object ReqRepMethodPerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.ReqRepMethodPerEndpointBuilder[ReqRepServicePerEndpoint, MethodPerEndpoint] {
    def methodPerEndpoint(servicePerEndpoint: ReqRepServicePerEndpoint): MethodPerEndpoint =
      ReqRepMethodPerEndpoint(servicePerEndpoint)
  }

  @deprecated("Use MethodPerEndpointBuilder", "2017-11-07")
  implicit object MethodIfaceBuilder
    extends com.twitter.finagle.thrift.MethodIfaceBuilder[ServiceIface, PlatinumService[Future]] {
    def newMethodIface(serviceIface: ServiceIface): MethodIface =
      new MethodIface(serviceIface)
  }

  @deprecated("Use MethodPerEndpoint", "2017-11-07")
  trait FutureIface
    extends com.twitter.scrooge.test.gold.thriftscala.GoldService.FutureIface
    with MethodPerEndpoint
    with PlatinumService[Future] {
    
    def moreCoolThings(request: com.twitter.scrooge.test.gold.thriftscala.Request): Future[Int]
  }

  class FinagledClient(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      clientParam: RichClientParam)
    extends PlatinumService$FinagleClient(service, clientParam)
    with FutureIface
    with MethodPerEndpoint {

    @deprecated("Use com.twitter.finagle.thrift.RichClientParam", "2017-08-16")
    def this(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: org.apache.thrift.protocol.TProtocolFactory = Protocols.binaryFactory(),
      serviceName: String = "PlatinumService",
      stats: com.twitter.finagle.stats.StatsReceiver = com.twitter.finagle.stats.NullStatsReceiver,
      responseClassifier: ctfs.ResponseClassifier = ctfs.ResponseClassifier.Default
    ) = this(
      service,
      RichClientParam(
        protocolFactory,
        serviceName,
        clientStats = stats,
        responseClassifier = responseClassifier
      )
    )

    @deprecated("Use com.twitter.finagle.thrift.RichClientParam", "2017-08-16")
    def this(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: org.apache.thrift.protocol.TProtocolFactory,
      serviceName: String,
      stats: com.twitter.finagle.stats.StatsReceiver
    ) = this(
      service,
      RichClientParam(
        protocolFactory,
        serviceName,
        clientStats = stats
      )
    )
  }

  class FinagledService(
      iface: PlatinumService[Future],
      serverParam: RichServerParam)
    extends PlatinumService$FinagleService(iface, serverParam) {

    @deprecated("Use com.twitter.finagle.thrift.RichServerParam", "2017-08-16")
    def this(
      iface: PlatinumService[Future],
      protocolFactory: org.apache.thrift.protocol.TProtocolFactory,
      serviceName: String = "PlatinumService"
    ) = this(iface, RichServerParam(protocolFactory, serviceName))
  }

  class Filter(serverParam: RichServerParam) {
    private[this] def protocolFactory: TProtocolFactory = serverParam.restrictedProtocolFactory

    private[this] def serviceName: String = serverParam.serviceName
    private[this] def responseClassifier: ctfs.ResponseClassifier = serverParam.responseClassifier
    private[this] def stats: StatsReceiver = serverParam.serverStats
    private[this] def perEndpointStats: Boolean = serverParam.perEndpointStats && !stats.isNull

    private[this] val tlReusableBuffer: TReusableBuffer = TReusableBuffer(maxThriftBufferSize = serverParam.maxThriftBufferSize)

    private[thriftscala] def exception(name: String, seqid: Int, code: Int, message: String): Buf = {
      val x = new TApplicationException(code, message)
      val memoryBuffer = tlReusableBuffer.get()
      try {
        val oprot = protocolFactory.getProtocol(memoryBuffer)

        oprot.writeMessageBegin(new TMessage(name, TMessageType.EXCEPTION, seqid))
        x.write(oprot)
        oprot.writeMessageEnd()
        oprot.getTransport.flush()

        // make a copy of the array of bytes to construct a new buffer because memoryBuffer is reusable
        Buf.ByteArray.Shared(memoryBuffer.getArray(), 0, memoryBuffer.length())
      } finally {
        tlReusableBuffer.reset()
      }
    }

    private[this] def reply(name: String, seqid: Int, result: ThriftStruct): Buf = {
      val memoryBuffer = tlReusableBuffer.get()
      try {
        val oprot = protocolFactory.getProtocol(memoryBuffer)
        val start = System.nanoTime
        oprot.writeMessageBegin(new TMessage(name, TMessageType.REPLY, seqid))
        result.write(oprot)
        oprot.writeMessageEnd()
        val trace = _root_.com.twitter.finagle.tracing.Trace()
        if (trace.isActivelyTracing) {
          trace.recordBinary("srv/response_serialization_ns", System.nanoTime - start)
        }
        oprot.getTransport.flush()

        // make a copy of the array of bytes to construct a new buffer because memoryBuffer is reusable
        Buf.ByteArray.Shared(memoryBuffer.getArray(), 0, memoryBuffer.length())
      } finally {
        tlReusableBuffer.reset()
      }
    }

    private[this] def recordResponse(reqRep: ctfs.ReqRep, methodStats: _root_.com.twitter.finagle.thrift.ThriftMethodStats): Unit = {
      ServerToReqRep.setCtx(reqRep)
      val classified = responseClassifier.applyOrElse(reqRep, ctfs.ResponseClassifier.Default)
      if (classified.isInstanceOf[ctfs.ResponseClass.Successful]) {
        methodStats.successCounter.incr()
      } else if (classified.isInstanceOf[ctfs.ResponseClass.Failed]) {
        methodStats.failuresCounter.incr()
        if (reqRep.response.isThrow) {
          methodStats.failuresScope.counter(Throwables.mkString(reqRep.response.throwable): _*).incr()
        }
      } // Last ResponseClass is Ignorable, which we do not need to record
    }

    final protected def perMethodStatsFilter(
      method: ThriftMethod
    ): finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[method.Args, method.Result]] = {
      val methodStats = if (perEndpointStats) {
        _root_.com.twitter.finagle.thrift.ThriftMethodStats((if (serviceName != "") stats.scope(serviceName) else stats).scope(method.name))
      } else {
        _root_.com.twitter.finagle.thrift.ThriftMethodStats.Null
      }

      new finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[method.Args, method.Result]] {
        def apply(
          req: (TProtocol, Int),
          service: finagle$Service[(TProtocol, Int), RichResponse[method.Args, method.Result]]
        ): Future[Array[Byte]] = {
          methodStats.requestsCounter.incr()
          service(req).transform { response =>
            if (response.isReturn) {
              val value = response.apply()
              if (value.isInstanceOf[SuccessfulResponse[method.Args, method.Result]]) {
                val succResp = value.asInstanceOf[SuccessfulResponse[method.Args, method.Result]]
                recordResponse(ctfs.ReqRep(succResp.input, _root_.com.twitter.util.Return(succResp.result.successField.get)), methodStats)
              } else if (value.isInstanceOf[ProtocolExceptionResponse[method.Args, method.Result]]) {
                val protExResp = value.asInstanceOf[ProtocolExceptionResponse[method.Args, method.Result]]
                recordResponse(ctfs.ReqRep(protExResp.input, _root_.com.twitter.util.Throw(protExResp.exception)), methodStats)
              } else if (value.isInstanceOf[ThriftExceptionResponse[method.Args, method.Result]]) {
                val thriftExResp = value.asInstanceOf[ThriftExceptionResponse[method.Args, method.Result]]
                val rep: Throwable = if (thriftExResp.ex.isInstanceOf[ThriftException]) {
                  _root_.com.twitter.finagle.SourcedException.setServiceName(thriftExResp.ex, serviceName)
                } else {
                  _root_.com.twitter.scrooge.internal.ApplicationExceptions.missingResult(serviceName)
                }
                recordResponse(ctfs.ReqRep(thriftExResp.input, _root_.com.twitter.util.Throw(rep)), methodStats)
              }
              Future.value(Buf.ByteArray.Owned.extract(value.response))
            } else { // Throw[_]
              recordResponse(ctfs.ReqRep(req, response), methodStats)
              Future.const(response.asInstanceOf[Throw[Array[Byte]]])
            }
          }
        }
      }
    }
    // ---- end boilerplate.

    val moreCoolThings: finagle$Filter[(TProtocol, Int), Array[Byte], MoreCoolThings.Args, MoreCoolThings.SuccessType] = {
      val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[MoreCoolThings.Args, MoreCoolThings.Result]] = perMethodStatsFilter(MoreCoolThings)
    
      val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[MoreCoolThings.Args, MoreCoolThings.Result]] {
        def apply(
          request: (TProtocol, Int),
          service: _root_.com.twitter.finagle.Service[(TProtocol, Int), RichResponse[MoreCoolThings.Args, MoreCoolThings.Result]]
        ): Future[RichResponse[MoreCoolThings.Args, MoreCoolThings.Result]] = {
          val iprot = request._1
          val seqid = request._2
          val res = service(request)
          res.transform(resTry => {
            if (resTry.isThrow && resTry.throwable.isInstanceOf[TProtocolException]) {
              val underlyingException = resTry.throwable
              iprot.readMessageEnd()
              Future.value(
                ProtocolExceptionResponse(
                  null,
                  exception("moreCoolThings", seqid, TApplicationException.PROTOCOL_ERROR, underlyingException.getMessage),
                  new TApplicationException(TApplicationException.PROTOCOL_ERROR, underlyingException.getMessage)))
            } else {
              res
            }
          })
        }
      }
    
      val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[MoreCoolThings.Args, MoreCoolThings.Result], MoreCoolThings.Args, MoreCoolThings.SuccessType] {
        def apply(
          request: (TProtocol, Int),
          service: _root_.com.twitter.finagle.Service[MoreCoolThings.Args, MoreCoolThings.SuccessType]
        ): Future[RichResponse[MoreCoolThings.Args, MoreCoolThings.Result]] = {
          val iprot = request._1
          val seqid = request._2
          val start = System.nanoTime
          val args = MoreCoolThings.Args.decode(iprot)
          iprot.readMessageEnd()
          val trace = _root_.com.twitter.finagle.tracing.Trace()
          if (trace.isActivelyTracing) {
            trace.recordBinary("srv/request_deserialization_ns", System.nanoTime - start)
          }
          _root_.com.twitter.finagle.context.Contexts.local.let(
            _root_.com.twitter.finagle.thrift.MethodMetadata.Key,
            _root_.com.twitter.finagle.thrift.MethodMetadata(MoreCoolThings)) {
            service(args)
          }.transform(resTry => {
            if (resTry.isReturn) {
              val methodResult = MoreCoolThings.Result(success = Some(resTry.apply()))
              Future.value(
                SuccessfulResponse(
                  args,
                  reply("moreCoolThings", seqid, methodResult),
                  methodResult))
            } else { // Throw[_]
              val underlyingException = resTry.throwable
              if (underlyingException.isInstanceOf[com.twitter.scrooge.test.gold.thriftscala.AnotherException])
                Future.value(
                  ThriftExceptionResponse(
                    args,
                    reply("moreCoolThings", seqid, MoreCoolThings.Result(ax = Some(underlyingException.asInstanceOf[com.twitter.scrooge.test.gold.thriftscala.AnotherException]))),
                    underlyingException.asInstanceOf[com.twitter.scrooge.test.gold.thriftscala.AnotherException]))
              else if (underlyingException.isInstanceOf[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException])
                Future.value(
                  ThriftExceptionResponse(
                    args,
                    reply("moreCoolThings", seqid, MoreCoolThings.Result(oce = Some(underlyingException.asInstanceOf[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException]))),
                    underlyingException.asInstanceOf[com.twitter.scrooge.test.gold.thriftscala.OverCapacityException]))
              else
                Future.const(resTry.asInstanceOf[Throw[RichResponse[MoreCoolThings.Args, MoreCoolThings.Result]]])
            }
          })
        }
      }
      statsFilter.andThen(protocolExnFilter).andThen(serdeFilter)
    }
  }

}
